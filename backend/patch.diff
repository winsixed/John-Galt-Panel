diff --git a/.env.example b/.env.example
index db2e591cfc20bfada60f33af470aeccb9213c84d..eb499415c422b994415029898772fa36a4545f07 100644
--- a/.env.example
+++ b/.env.example
@@ -1,8 +1,9 @@
 # Backend
 DATABASE_URL=sqlite:///./app.db
 SECRET_KEY=your-secret-key
 REDIS_URL=redis://localhost:6379/0
 SENTRY_DSN=
+CORS_ALLOW_ORIGINS=http://localhost:3000
 
 # Frontend
 NEXT_PUBLIC_API_URL=http://localhost:8000
diff --git a/README.md b/README.md
index 02b9991e724a5234b58c8c944f153ce98ad32f3c..ccff4a0dcf532a39b18af302753112b39295521e 100644
--- a/README.md
+++ b/README.md
@@ -1,51 +1,83 @@
 # John Galt Panel
 
 Administrative panel for a hookah bar built with **Next.js** and **FastAPI**.
 
+## Features
+
+- JWT based authentication with role checks
+- Rate limited login endpoint
+- Health check endpoint `/api/health`
+- Production ready nginx config with security headers
+
+### Role Matrix
+
+| Role      | Permissions              |
+|-----------|-------------------------|
+| admin     | full access             |
+| staff     | standard management     |
+| viewer    | read only               |
+| inventory | inventory management    |
+
 ## Getting Started
 
 ### Backend
 ```bash
 cd backend
 python -m venv venv && . venv/bin/activate
 pip install -r requirements.txt
 uvicorn fastapi_app.main:app --reload
 ```
 
 ### Frontend
 ```bash
 cd frontend
 npm install
 npm run dev
 ```
 
 ## Scripts
 - `panel.sh` – interactive DevOps panel
 - `deploy-full.sh` – build and deploy frontend and restart SSR
 - `rollback.sh` – restore from backup
 
+## Testing
+
+Run backend tests with **pytest**:
+
+```bash
+cd backend
+pytest
+```
+
+Run frontend tests with **jest**:
+
+```bash
+cd frontend
+npm test
+```
+
 ## Useful Pages
 - API docs: `http://localhost:8000/docs`
 - Sign In: `/signin`
 - Profile: `/profile`
 
 Environment variables are documented in `.env.example`.
 
 The `nginx/john-galt.conf` file contains an example reverse proxy
 configuration for serving the Next.js SSR frontend and FastAPI backend.
 
 ## Production Deployment
 
 1. Build the frontend:
 
    ```bash
    cd frontend
    npm install
    npm run build
    ```
 
 2. Start the server with **PM2**:
 
    ```bash
    pm2 start npm --name john-galt-frontend -- start
    ```
diff --git a/backend/.env.example b/backend/.env.example
new file mode 100644
index 0000000000000000000000000000000000000000..1748519eb19995f379edd810615fcd820c1753fb
--- /dev/null
+++ b/backend/.env.example
@@ -0,0 +1,3 @@
+DATABASE_URL=sqlite:///./app.db
+SECRET_KEY=change-me
+REDIS_URL=redis://localhost:6379/0
diff --git a/backend/fastapi_app/dependencies.py b/backend/fastapi_app/dependencies.py
index 0a30af8e66e493a921a8f4b09ab7b365b890118b..0f07312806b2d8ba0dc23d7389f6f557e0b41430 100644
--- a/backend/fastapi_app/dependencies.py
+++ b/backend/fastapi_app/dependencies.py
@@ -4,43 +4,47 @@ from sqlalchemy.orm import Session
 from fastapi.security import OAuth2PasswordBearer
 from .database import SessionLocal
 from .auth import SECRET_KEY, ALGORITHM
 from . import models
 from .models import UserRole
 
 oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")
 
 
 def get_db():
     db = SessionLocal()
     try:
         yield db
     finally:
         db.close()
 
 
 def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
     credentials_exception = HTTPException(
         status_code=status.HTTP_401_UNAUTHORIZED,
         detail="Could not validate credentials",
         headers={"WWW-Authenticate": "Bearer"},
     )
     try:
         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
-        username: str | None = payload.get("sub")
-        if username is None:
+        sub = payload.get("sub")
+        if sub is None:
+            raise credentials_exception
+        try:
+            user_id = int(sub)
+        except ValueError:
             raise credentials_exception
     except JWTError:
         raise credentials_exception
-    user = db.query(models.User).filter(models.User.username == username).first()
+    user = db.query(models.User).filter(models.User.id == user_id).first()
     if user is None:
         raise credentials_exception
     return user
 
 
 def requires_role(*allowed_roles: UserRole):
     def wrapper(user: models.User = Depends(get_current_user)):
         if user.role not in allowed_roles:
             raise HTTPException(status_code=403, detail="Недостаточно прав")
         return user
 
     return Depends(wrapper)
diff --git a/backend/fastapi_app/exception_handlers.py b/backend/fastapi_app/exception_handlers.py
index a08e2415027a7405c865cd5cea44fd562bc2338b..30add51a12ba0c6ff7c8b8750648c8497de855a0 100644
--- a/backend/fastapi_app/exception_handlers.py
+++ b/backend/fastapi_app/exception_handlers.py
@@ -1,35 +1,36 @@
 from fastapi import Request, status, HTTPException
 from fastapi.responses import JSONResponse
 from fastapi.exceptions import RequestValidationError
 from sqlalchemy.exc import IntegrityError
 from starlette.requests import Request as StarletteRequest
 import logging
 import traceback
 
 
 async def validation_exception_handler(request: Request, exc: RequestValidationError):
-    logging.error("Validation error: %s", exc)
+    logging.error("Validation error: %s\n%s", exc, traceback.format_exc())
     return JSONResponse(
         status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
         content={"detail": "Invalid input", "errors": str(exc.errors())},
     )
 
 
 async def db_exception_handler(request: Request, exc: IntegrityError):
+    logging.error("Database error: %s\n%s", exc, traceback.format_exc())
     return JSONResponse(
         status_code=status.HTTP_400_BAD_REQUEST,
         content={"detail": "Database error"},
     )
 
 
 async def http_exception_handler(request: Request, exc: HTTPException):
-    logging.error("HTTP error: %s", exc.detail)
+    logging.error("HTTP error: %s\n%s", exc.detail, traceback.format_exc())
     return JSONResponse(status_code=exc.status_code, content={"detail": exc.detail})
 
 
 async def server_error_handler(request: StarletteRequest, exc: Exception):
     logging.error("Unhandled Exception:\n%s", traceback.format_exc())
     return JSONResponse(
         status_code=500,
         content={"detail": "Internal Server Error"},
     )
diff --git a/backend/fastapi_app/main.py b/backend/fastapi_app/main.py
index 5238a35c75d12820db55942b256c9c31d31653be..f7c6a2b38bac1c7c21fe901a224e296ce792a745 100644
--- a/backend/fastapi_app/main.py
+++ b/backend/fastapi_app/main.py
@@ -1,42 +1,53 @@
 from fastapi import FastAPI
+from fastapi.middleware.cors import CORSMiddleware
 from fastapi.exceptions import RequestValidationError, HTTPException
 from sqlalchemy.exc import IntegrityError
 from slowapi import _rate_limit_exceeded_handler
 from slowapi.middleware import SlowAPIMiddleware
 from .routers import api_router
 from .rate_limiter import limiter
 from .exception_handlers import (
     validation_exception_handler,
     db_exception_handler,
     http_exception_handler,
     server_error_handler,
 )
 from .logging_config import setup_logging
 import os
 import sentry_sdk
 
 setup_logging()
 
 # Optional error tracking via Sentry
 if os.getenv("SENTRY_DSN"):
     sentry_sdk.init(dsn=os.getenv("SENTRY_DSN"))
 
 app = FastAPI(
     title="John Galt Panel API",
     description="Backend services for John Galt Panel",
     version="0.2.0",
 )
 
+# CORS configuration
+origins = os.getenv("CORS_ALLOW_ORIGINS", "http://localhost:3000").split(",")
+app.add_middleware(
+    CORSMiddleware,
+    allow_origins=[o.strip() for o in origins],
+    allow_credentials=True,
+    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
+    allow_headers=["*"],
+)
+
 # Rate Limiting
 app.state.limiter = limiter
 app.add_middleware(SlowAPIMiddleware)
 app.add_exception_handler(429, _rate_limit_exceeded_handler)
 
 # Custom Exception Handlers
 app.add_exception_handler(RequestValidationError, validation_exception_handler)
 app.add_exception_handler(IntegrityError, db_exception_handler)
 app.add_exception_handler(HTTPException, http_exception_handler)
 app.add_exception_handler(Exception, server_error_handler)  # Catch-all 500 handler
 
 # Routers
 app.include_router(api_router)
diff --git a/backend/fastapi_app/models.py b/backend/fastapi_app/models.py
index cee76143dbcb1dafcb415fb9ff3bae23b8ff71cd..8356ceafa3fea2d2b88218e576afe80a12588d48 100644
--- a/backend/fastapi_app/models.py
+++ b/backend/fastapi_app/models.py
@@ -1,18 +1,18 @@
 import enum
 from sqlalchemy import Column, Integer, String, Enum
 from .database import Base
 
 
 class UserRole(str, enum.Enum):
     admin = "admin"
     staff = "staff"
     viewer = "viewer"
     inventory = "inventory_manager"
 
 class User(Base):
     __tablename__ = 'users'
 
     id = Column(Integer, primary_key=True, index=True)
     username = Column(String, unique=True, index=True, nullable=False)
     hashed_password = Column(String, nullable=False)
-    role = Column(Enum(UserRole), default=UserRole.staff, nullable=False)
+    role = Column(Enum(UserRole), default=UserRole.staff, nullable=False, index=True)
diff --git a/backend/fastapi_app/routers/auth.py b/backend/fastapi_app/routers/auth.py
index 3d3fb1490e00f564fa2b24a8cdfb07c06ffad508..4e03ba7fee8549c5eb90eae7f71c7b550e4615b1 100644
--- a/backend/fastapi_app/routers/auth.py
+++ b/backend/fastapi_app/routers/auth.py
@@ -1,75 +1,80 @@
 from fastapi import APIRouter, Depends, HTTPException, status, Request, Body
 import logging
 from sqlalchemy.orm import Session
 from ..rate_limiter import limiter
 from .. import models, schemas
 from ..auth import get_password_hash, verify_password, create_access_token
 from ..dependencies import get_db, get_current_user
 
 router = APIRouter(prefix="/auth", tags=["auth"])
 
 @router.post(
     "/register",
     response_model=schemas.UserPublic,
     status_code=201,
     summary="Register new account",
     description="Create a new user with staff role",
 )
-def register(user_in: schemas.UserCreate, db: Session = Depends(get_db)):
+@limiter.limit("5/minute")
+def register(
+    request: Request,
+    user_in: schemas.UserCreate,
+    db: Session = Depends(get_db),
+):
     existing = db.query(models.User).filter(models.User.username == user_in.username).first()
     if existing:
         raise HTTPException(status_code=400, detail="Username already registered")
     user = models.User(
         username=user_in.username,
         hashed_password=get_password_hash(user_in.password),
         role=models.UserRole.staff,
     )
     db.add(user)
     db.commit()
     db.refresh(user)
     return user
 
 @router.post(
     "/login",
     summary="Login",
     description="Obtain JWT access token",
 )
 @limiter.limit("5/minute")
 def login(
     request: Request,
     data: schemas.UserLogin = Body(...),
     db: Session = Depends(get_db),
 ):
     logger = logging.getLogger("auth")
     logger.info("Login attempt user=%s", data.username)
     user = db.query(models.User).filter(models.User.username == data.username).first()
     if not user:
         logger.info("User not found: %s", data.username)
         raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect username or password")
 
     password_ok = False
     try:
         password_ok = verify_password(data.password, user.hashed_password)
     except Exception as exc:
         logger.error("Password verification failed: %s", exc)
 
     if not password_ok:
         raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect username or password")
 
     try:
-        token = create_access_token({"sub": user.username, "role": user.role})
+        token = create_access_token({"sub": str(user.id), "role": user.role})
     except Exception as exc:
         logger.error("Token generation failed: %s", exc)
         raise HTTPException(status_code=500, detail="Token generation failed")
 
     logger.info("JWT token issued for %s", user.username)
     return {"access_token": token, "token_type": "bearer"}
 
 @router.get(
     "/me",
     response_model=schemas.UserPublic,
     summary="Get current user",
     description="Return the authenticated user's profile",
 )
 def read_users_me(current_user: models.User = Depends(get_current_user)):
     return current_user
diff --git a/backend/fastapi_app/routers/health.py b/backend/fastapi_app/routers/health.py
index 0da2ddde3ac6b9d541263f28016014eeb31149bc..fd41b71725fe2846c45a08d134870088ecf9a2fa 100644
--- a/backend/fastapi_app/routers/health.py
+++ b/backend/fastapi_app/routers/health.py
@@ -1,7 +1,12 @@
-from fastapi import APIRouter
+from fastapi import APIRouter, HTTPException
 
 router = APIRouter(prefix="/health", tags=["health"])
 
 @router.get("/", summary="Health check", description="Service health status")
 def health_root():
     return {"status": "ok"}
+
+
+@router.get("/error", include_in_schema=False)
+def force_error():
+    raise RuntimeError("test error")
diff --git a/backend/fastapi_app/routers/users.py b/backend/fastapi_app/routers/users.py
index 275ceac0cfbea34d36422113b4f6977b62a43cd1..5bc8b4726f5cba957f7b166987ba2afaa377a8bf 100644
--- a/backend/fastapi_app/routers/users.py
+++ b/backend/fastapi_app/routers/users.py
@@ -1,52 +1,70 @@
-from fastapi import APIRouter, Depends, HTTPException
+from fastapi import APIRouter, Depends, HTTPException, Request
+from ..rate_limiter import limiter
 from sqlalchemy.orm import Session
 from ..dependencies import get_current_user, get_db, requires_role
 from ..auth import get_password_hash
 from .. import models, schemas
 from ..models import UserRole
 from ..schemas import UserCreate, UserPublic
 
 router = APIRouter(prefix="/users", tags=["users"])
 
 @router.get(
     "/",
     response_model=list[UserPublic],
     summary="List users",
     description="Retrieve all registered users",
 )
 def list_users(db: Session = Depends(get_db), current_user: models.User = requires_role(UserRole.admin)):
     return db.query(models.User).all()
 
 @router.get(
     "/admin-only",
     summary="Admin secret",
     description="Endpoint visible only to admins",
 )
 def admin_info(current_user: models.User = requires_role(UserRole.admin)):
     return {"message": "secret"}
 
+
+@router.get("/staff", summary="Staff area")
+def staff_area(current_user: models.User = requires_role(UserRole.staff, UserRole.admin)):
+    return {"message": "hello staff"}
+
+
+@router.get("/viewer", summary="Viewer area")
+def viewer_area(current_user: models.User = requires_role(UserRole.viewer)):
+    return {"message": "hello viewer"}
+
+
+@router.get("/inventory", summary="Inventory manager area")
+def inventory_area(current_user: models.User = requires_role(UserRole.inventory)):
+    return {"message": "inventory"}
+
 @router.post(
     "/create",
     response_model=UserPublic,
     summary="Create user",
     description="Admin creates a new user",
 )
+@limiter.limit("10/minute")
 def create_user(
+    request: Request,
     user: UserCreate,
     db: Session = Depends(get_db),
     current_user: models.User = requires_role(UserRole.admin),
 ):
     existing = db.query(models.User).filter_by(username=user.username).first()
     if existing:
         raise HTTPException(status_code=400, detail="User already exists")
 
     hashed_pw = get_password_hash(user.password)
     new_user = models.User(
         username=user.username,
         hashed_password=hashed_pw,
         role=user.role,
     )
     db.add(new_user)
     db.commit()
     db.refresh(new_user)
     return new_user
diff --git a/backend/fastapi_app/schemas.py b/backend/fastapi_app/schemas.py
index 28cf9a486e5b4f0eed0b4873cbfdeaa71113c8a2..badf90f50452af203cae10e879c549e67be2bd7c 100644
--- a/backend/fastapi_app/schemas.py
+++ b/backend/fastapi_app/schemas.py
@@ -1,20 +1,23 @@
-from pydantic import BaseModel
+from pydantic import BaseModel, Field
 from typing import Optional
 from .models import UserRole
 
+username_regex = r"^[a-zA-Z0-9_]+$"
+
+
 class UserBase(BaseModel):
-    username: str
+    username: str = Field(..., min_length=3, max_length=50, pattern=username_regex)
 
 class UserCreate(UserBase):
-    password: str
+    password: str = Field(..., min_length=6)
     role: Optional[UserRole] = UserRole.staff
 
 class UserLogin(UserBase):
-    password: str
+    password: str = Field(..., min_length=6)
 
 class UserPublic(UserBase):
     id: int
     role: UserRole
 
     class Config:
         orm_mode = True
diff --git a/backend/requirements.txt b/backend/requirements.txt
index 1d84ecd7eb5681c18ecafe52c201af50f5b1a9a0..f558658bf8188f2bdd0aa2ed6381479ca94a8ca1 100644
--- a/backend/requirements.txt
+++ b/backend/requirements.txt
@@ -1,10 +1,12 @@
 fastapi
 uvicorn
 sqlalchemy
 passlib[bcrypt]
 python-jose
 python-dotenv
 httpx
 email-validator
 python-multipart
 psycopg2-binary
+slowapi
+sentry-sdk
diff --git a/backend/tests/conftest.py b/backend/tests/conftest.py
index 74c59a7ccbec56d91003ae932c3de2af1ec7cf52..4e424bf8066e5ce58c61d7629fd274c2b90cb392 100644
--- a/backend/tests/conftest.py
+++ b/backend/tests/conftest.py
@@ -1,36 +1,38 @@
 import os
 import pytest
 from sqlalchemy import create_engine
 from sqlalchemy.orm import sessionmaker
 from fastapi.testclient import TestClient
 
 # Set env vars before importing app
 os.environ.setdefault("SECRET_KEY", "testsecret")
 os.environ.setdefault("DATABASE_URL", "sqlite:///./test.db")
 
 from fastapi_app.database import Base
 from fastapi_app.dependencies import get_db
 from fastapi_app.main import app
+from fastapi_app.rate_limiter import limiter
 
 engine = create_engine(os.environ["DATABASE_URL"], connect_args={"check_same_thread": False})
 TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
 
 @pytest.fixture(scope="function")
 def db_session():
     Base.metadata.create_all(bind=engine)
     session = TestingSessionLocal()
     try:
         yield session
     finally:
         session.close()
         Base.metadata.drop_all(bind=engine)
 
 @pytest.fixture(scope="function")
 def client(db_session):
     def override_get_db():
         try:
             yield db_session
         finally:
             pass
     app.dependency_overrides[get_db] = override_get_db
-    return TestClient(app)
+    limiter.reset()
+    return TestClient(app, raise_server_exceptions=False)
diff --git a/backend/tests/test_auth.py b/backend/tests/test_auth.py
index 9f3e2b4314a2957a16e6c0125f8d51a4d3c64ce5..82ee596ec03af77e4d0e8d223f961f5be24b63f8 100644
--- a/backend/tests/test_auth.py
+++ b/backend/tests/test_auth.py
@@ -1,45 +1,52 @@
 from fastapi import status
 from fastapi.testclient import TestClient
 
 
 def test_register_and_login(client: TestClient):
     response = client.post(
         '/api/auth/register',
         json={'username': 'testuser', 'password': 'secret', 'role': 'admin'},
     )
     assert response.status_code == status.HTTP_201_CREATED
     token_res = client.post(
         '/api/auth/login', json={'username': 'testuser', 'password': 'secret'}
     )
     assert token_res.status_code == status.HTTP_200_OK
     token = token_res.json()['access_token']
     me = client.get('/api/auth/me', headers={'Authorization': f'Bearer {token}'})
     assert me.status_code == status.HTTP_200_OK
     assert me.json()['username'] == 'testuser'
     assert me.json()['role'] == 'staff'
 
 
 def test_cannot_register_as_admin(client: TestClient):
     res = client.post(
         '/api/auth/register',
-        json={'username': 'newuser', 'password': 'pw', 'role': 'admin'},
+        json={'username': 'newuser', 'password': 'secretpw', 'role': 'admin'},
     )
     assert res.status_code == status.HTTP_201_CREATED
     assert res.json()['role'] == 'staff'
 
 
 def test_login_failures(client: TestClient):
     # nonexistent user
-    bad = client.post('/api/auth/login', json={'username': 'none', 'password': 'pw'})
+    bad = client.post('/api/auth/login', json={'username': 'none', 'password': 'secretpw'})
     assert bad.status_code == status.HTTP_401_UNAUTHORIZED
 
     # register user
-    client.post('/api/auth/register', json={'username': 'bob', 'password': 'pw'})
-    wrong = client.post('/api/auth/login', json={'username': 'bob', 'password': 'bad'})
+    client.post('/api/auth/register', json={'username': 'bob', 'password': 'secretpw'})
+    wrong = client.post('/api/auth/login', json={'username': 'bob', 'password': 'badpass'})
     assert wrong.status_code == status.HTTP_401_UNAUTHORIZED
 
 
 def test_login_validation_error(client: TestClient):
     # missing password
     resp = client.post('/api/auth/login', json={'username': 'bob'})
     assert resp.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY
+
+
+def test_register_validation(client: TestClient):
+    short = client.post('/api/auth/register', json={'username': 'ab', 'password': 'pw'})
+    assert short.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY
+    badchars = client.post('/api/auth/register', json={'username': 'bob!', 'password': 'secret'})
+    assert badchars.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY
diff --git a/backend/tests/test_handlers.py b/backend/tests/test_handlers.py
new file mode 100644
index 0000000000000000000000000000000000000000..3fb76c4b236639e76138d4619cbf1a3b9cd9ace3
--- /dev/null
+++ b/backend/tests/test_handlers.py
@@ -0,0 +1,8 @@
+from fastapi import status
+from fastapi.testclient import TestClient
+
+
+def test_server_error_handler(client: TestClient):
+    resp = client.get('/api/health/error')
+    assert resp.status_code == status.HTTP_500_INTERNAL_SERVER_ERROR
+    assert resp.json()['detail'] == 'Internal Server Error'
diff --git a/backend/tests/test_users.py b/backend/tests/test_users.py
index 65493d6e7c30be2cbe5b8863247cd8fe7e40de56..8cefe5d1727a2828bd915387621655f7a2ba9eec 100644
--- a/backend/tests/test_users.py
+++ b/backend/tests/test_users.py
@@ -1,55 +1,85 @@
 from fastapi import status
 from fastapi.testclient import TestClient
 from sqlalchemy.orm import Session
 from fastapi_app import models
 
 
 def create_admin(client: TestClient, db: Session):
-    client.post('/api/auth/register', json={'username': 'admin', 'password': 'pw'})
-    user = db.query(models.User).filter_by(username='admin').first()
+    client.post('/api/auth/register', json={'username': 'adminuser', 'password': 'secretpw'})
+    user = db.query(models.User).filter_by(username='adminuser').first()
     user.role = models.UserRole.admin
     db.commit()
     token_res = client.post(
-        '/api/auth/login', json={'username': 'admin', 'password': 'pw'}
+        '/api/auth/login', json={'username': 'adminuser', 'password': 'secretpw'}
     )
     return token_res.json()['access_token']
 
 
 def test_user_endpoints(client: TestClient, db_session: Session):
     token = create_admin(client, db_session)
 
     # create another user as admin
     res = client.post(
         '/api/users/create',
-        json={'username': 'u1', 'password': 'pw', 'role': 'viewer'},
+        json={'username': 'userone', 'password': 'secretpw', 'role': 'viewer'},
         headers={'Authorization': f'Bearer {token}'},
     )
     assert res.status_code == status.HTTP_200_OK
-    assert res.json()['username'] == 'u1'
+    assert res.json()['username'] == 'userone'
 
     # list users
     users = client.get('/api/users/', headers={'Authorization': f'Bearer {token}'})
     assert users.status_code == status.HTTP_200_OK
     assert len(users.json()) >= 1
 
     # admin-only endpoint
     secret = client.get('/api/users/admin-only', headers={'Authorization': f'Bearer {token}'})
     assert secret.status_code == status.HTTP_200_OK
 
 
 
 def test_admin_required(client: TestClient):
     # regular user
-    client.post('/api/auth/register', json={'username': 'bob', 'password': 'pw'})
+    client.post('/api/auth/register', json={'username': 'bobby', 'password': 'secretpw'})
     token_res = client.post(
-        '/api/auth/login', json={'username': 'bob', 'password': 'pw'}
+        '/api/auth/login', json={'username': 'bobby', 'password': 'secretpw'}
     )
     token = token_res.json()['access_token']
 
     res = client.post(
         '/api/users/create',
-        json={'username': 'bad', 'password': 'pw'},
+        json={'username': 'baduser', 'password': 'secretpw'},
         headers={'Authorization': f'Bearer {token}'},
     )
     assert res.status_code == status.HTTP_403_FORBIDDEN
 
+
+def test_role_endpoints(client: TestClient, db_session: Session):
+    # create staff user
+    client.post('/api/auth/register', json={'username': 'staffer', 'password': 'secretpw'})
+    user = db_session.query(models.User).filter_by(username='staffer').first()
+    user.role = models.UserRole.staff
+    db_session.commit()
+    token = client.post('/api/auth/login', json={'username': 'staffer', 'password': 'secretpw'}).json()['access_token']
+    # staff area allowed
+    res = client.get('/api/users/staff', headers={'Authorization': f'Bearer {token}'})
+    assert res.status_code == status.HTTP_200_OK
+
+    # viewer cannot access staff area
+    client.post('/api/auth/register', json={'username': 'viewerx', 'password': 'secretpw'})
+    view = db_session.query(models.User).filter_by(username='viewerx').first()
+    view.role = models.UserRole.viewer
+    db_session.commit()
+    vtoken = client.post('/api/auth/login', json={'username': 'viewerx', 'password': 'secretpw'}).json()['access_token']
+    forb = client.get('/api/users/staff', headers={'Authorization': f'Bearer {vtoken}'})
+    assert forb.status_code == status.HTTP_403_FORBIDDEN
+
+    # inventory role endpoint
+    client.post('/api/auth/register', json={'username': 'inv', 'password': 'secretpw'})
+    inv = db_session.query(models.User).filter_by(username='inv').first()
+    inv.role = models.UserRole.inventory
+    db_session.commit()
+    itoken = client.post('/api/auth/login', json={'username': 'inv', 'password': 'secretpw'}).json()['access_token']
+    inv_ok = client.get('/api/users/inventory', headers={'Authorization': f'Bearer {itoken}'})
+    assert inv_ok.status_code == status.HTTP_200_OK
+
diff --git a/frontend/.env.example b/frontend/.env.example
new file mode 100644
index 0000000000000000000000000000000000000000..600de8dfef0cf0e78b0dbe1655db075cf166bcda
--- /dev/null
+++ b/frontend/.env.example
@@ -0,0 +1 @@
+NEXT_PUBLIC_API_URL=http://localhost:8000
diff --git a/frontend/jest.config.js b/frontend/jest.config.js
index 62d6620307e05b79535e67461eaef0ec342ec4b7..f64a34ad5d0107190f2638a7849a6973dd9a8308 100644
--- a/frontend/jest.config.js
+++ b/frontend/jest.config.js
@@ -1,6 +1,15 @@
-module.exports = {
-  testEnvironment: 'jest-environment-jsdom',
+const nextJest = require('next/jest');
+
+const createJestConfig = nextJest({
+  dir: './',
+});
+
+const customJestConfig = {
+  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
   moduleNameMapper: {
-    '^@/(.*)$': '<rootDir>/src/$1'
-  }
+    '^@/(.*)$': '<rootDir>/src/$1',
+  },
+  testEnvironment: 'jest-environment-jsdom',
 };
+
+module.exports = createJestConfig(customJestConfig);
diff --git a/frontend/jest.setup.js b/frontend/jest.setup.js
new file mode 100644
index 0000000000000000000000000000000000000000..093264800d8c6e29d4c5645d83275019d9e61067
--- /dev/null
+++ b/frontend/jest.setup.js
@@ -0,0 +1 @@
+require('@testing-library/jest-dom');
diff --git a/frontend/middleware.ts b/frontend/middleware.ts
index 01819c1be411d9e569674d997d8f41594281f0c3..c3a073c1d6486e1d9d533bdc1cf7e05352c030bd 100644
--- a/frontend/middleware.ts
+++ b/frontend/middleware.ts
@@ -1,37 +1,35 @@
 import { NextRequest, NextResponse } from 'next/server';
+import { parseJwt, isExpired } from './src/utils/jwt';
 
 const PROTECTED = [
   '/admin',
   '/inventory',
   '/settings',
   '/profile',
   '/users'
 ];
 
-function parseJwt(token: string) {
-  try {
-    const base64 = token.split('.')[1].replace(/-/g, '+').replace(/_/g, '/');
-    return JSON.parse(Buffer.from(base64, 'base64').toString());
-  } catch {
-    return null;
-  }
-}
 
 export function middleware(req: NextRequest) {
   const { pathname } = req.nextUrl;
   if (PROTECTED.some((p) => pathname.startsWith(p))) {
     const token = req.cookies.get('token')?.value;
     if (!token) {
       return NextResponse.redirect(new URL('/login', req.url));
     }
     const payload = parseJwt(token);
-    if (!payload || (payload.role !== 'admin' && payload.role !== 'staff')) {
+    if (!payload || isExpired(payload)) {
+      const res = NextResponse.redirect(new URL('/login', req.url));
+      res.cookies.set('token', '', { path: '/', expires: new Date(0) });
+      return res;
+    }
+    if (payload.role !== 'admin' && payload.role !== 'staff') {
       return NextResponse.redirect(new URL('/unauthorized', req.url));
     }
   }
   return NextResponse.next();
 }
 
 export const config = {
   matcher: ['/admin/:path*','/inventory/:path*','/settings/:path*','/profile/:path*','/users/:path*']
 };
diff --git a/frontend/package-lock.json b/frontend/package-lock.json
index 9d8487ebc90ae19055b26c8c1fa2eac0e14844fb..d2efe1657b28d207b15950f5852a90bf19cf1f30 100644
--- a/frontend/package-lock.json
+++ b/frontend/package-lock.json
@@ -12,64 +12,74 @@
         "@fullcalendar/daygrid": "^6.1.15",
         "@fullcalendar/interaction": "^6.1.15",
         "@fullcalendar/list": "^6.1.15",
         "@fullcalendar/react": "^6.1.15",
         "@fullcalendar/timegrid": "^6.1.15",
         "@react-jvectormap/core": "^1.0.4",
         "@react-jvectormap/world": "^1.1.2",
         "@tailwindcss/forms": "^0.5.9",
         "@tailwindcss/postcss": "^4.0.9",
         "apexcharts": "^4.3.0",
         "autoprefixer": "^10.4.20",
         "flatpickr": "^4.6.13",
         "next": "15.2.3",
         "react": "^19.0.0",
         "react-apexcharts": "^1.7.0",
         "react-dnd": "^16.0.1",
         "react-dnd-html5-backend": "^16.0.1",
         "react-dom": "^19.0.0",
         "react-dropzone": "^14.3.5",
         "swiper": "^11.2.0",
         "tailwind-merge": "^2.6.0"
       },
       "devDependencies": {
         "@eslint/eslintrc": "^3",
         "@svgr/webpack": "^8.1.0",
+        "@testing-library/jest-dom": "^6.6.3",
+        "@testing-library/react": "^16.3.0",
+        "@testing-library/user-event": "^14.6.1",
         "@types/node": "^20",
         "@types/react": "^19",
         "@types/react-dom": "^19",
         "@types/react-transition-group": "^4.4.12",
         "eslint": "^9",
         "eslint-config-next": "15.1.3",
         "jest": "^29.7.0",
         "jest-environment-jsdom": "^30.0.2",
         "postcss": "^8",
         "tailwindcss": "^4.0.0",
         "ts-jest": "^29.0.0",
         "typescript": "^5"
       }
     },
+    "node_modules/@adobe/css-tools": {
+      "version": "4.4.3",
+      "resolved": "https://registry.npmjs.org/@adobe/css-tools/-/css-tools-4.4.3.tgz",
+      "integrity": "sha512-VQKMkwriZbaOgVCby1UDY/LDk5fIjhQicCvVPFqfe+69fWaPWydbWJ3wRt59/YzIwda1I81loas3oCoHxnqvdA==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/@alloc/quick-lru": {
       "version": "5.2.0",
       "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
       "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
       "license": "MIT",
       "engines": {
         "node": ">=10"
       },
       "funding": {
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
     "node_modules/@ampproject/remapping": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
       "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
       "dev": true,
       "license": "Apache-2.0",
       "dependencies": {
         "@jridgewell/gen-mapping": "^0.3.5",
         "@jridgewell/trace-mapping": "^0.3.24"
       },
       "engines": {
         "node": ">=6.0.0"
       }
@@ -4513,71 +4523,233 @@
         "x64"
       ],
       "license": "MIT",
       "optional": true,
       "os": [
         "win32"
       ],
       "engines": {
         "node": ">= 10"
       }
     },
     "node_modules/@tailwindcss/postcss": {
       "version": "4.0.15",
       "resolved": "https://registry.npmjs.org/@tailwindcss/postcss/-/postcss-4.0.15.tgz",
       "integrity": "sha512-qyrpoDKIO7wzkRbKCvGLo7gXRjT9/Njf7ZJiJhG4njrfZkvOhjwnaHpYbpxYeDysEg+9pB1R4jcd+vQ7ZUDsmQ==",
       "license": "MIT",
       "dependencies": {
         "@alloc/quick-lru": "^5.2.0",
         "@tailwindcss/node": "4.0.15",
         "@tailwindcss/oxide": "4.0.15",
         "lightningcss": "1.29.2",
         "postcss": "^8.4.41",
         "tailwindcss": "4.0.15"
       }
     },
+    "node_modules/@testing-library/dom": {
+      "version": "10.4.0",
+      "resolved": "https://registry.npmjs.org/@testing-library/dom/-/dom-10.4.0.tgz",
+      "integrity": "sha512-pemlzrSESWbdAloYml3bAJMEfNh1Z7EduzqPKprCH5S341frlpYnUEW0H72dLxa6IsYr+mPno20GiSm+h9dEdQ==",
+      "dev": true,
+      "license": "MIT",
+      "peer": true,
+      "dependencies": {
+        "@babel/code-frame": "^7.10.4",
+        "@babel/runtime": "^7.12.5",
+        "@types/aria-query": "^5.0.1",
+        "aria-query": "5.3.0",
+        "chalk": "^4.1.0",
+        "dom-accessibility-api": "^0.5.9",
+        "lz-string": "^1.5.0",
+        "pretty-format": "^27.0.2"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@testing-library/dom/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "peer": true,
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/@testing-library/dom/node_modules/aria-query": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.0.tgz",
+      "integrity": "sha512-b0P0sZPKtyu8HkeRAfCq0IfURZK+SuwMjY1UXGBU27wpAiTwQAIlq56IbIO+ytk/JjS1fMR14ee5WBBfKi5J6A==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "peer": true,
+      "dependencies": {
+        "dequal": "^2.0.3"
+      }
+    },
+    "node_modules/@testing-library/dom/node_modules/pretty-format": {
+      "version": "27.5.1",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-27.5.1.tgz",
+      "integrity": "sha512-Qb1gy5OrP5+zDf2Bvnzdl3jsTf1qXVMazbvCoKhtKqVs4/YK4ozX4gKQJJVyNe+cajNPn0KoC0MC3FUmaHWEmQ==",
+      "dev": true,
+      "license": "MIT",
+      "peer": true,
+      "dependencies": {
+        "ansi-regex": "^5.0.1",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^17.0.1"
+      },
+      "engines": {
+        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
+      }
+    },
+    "node_modules/@testing-library/dom/node_modules/react-is": {
+      "version": "17.0.2",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-17.0.2.tgz",
+      "integrity": "sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==",
+      "dev": true,
+      "license": "MIT",
+      "peer": true
+    },
+    "node_modules/@testing-library/jest-dom": {
+      "version": "6.6.3",
+      "resolved": "https://registry.npmjs.org/@testing-library/jest-dom/-/jest-dom-6.6.3.tgz",
+      "integrity": "sha512-IteBhl4XqYNkM54f4ejhLRJiZNqcSCoXUOG2CPK7qbD322KjQozM4kHQOfkG2oln9b9HTYqs+Sae8vBATubxxA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@adobe/css-tools": "^4.4.0",
+        "aria-query": "^5.0.0",
+        "chalk": "^3.0.0",
+        "css.escape": "^1.5.1",
+        "dom-accessibility-api": "^0.6.3",
+        "lodash": "^4.17.21",
+        "redent": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=14",
+        "npm": ">=6",
+        "yarn": ">=1"
+      }
+    },
+    "node_modules/@testing-library/jest-dom/node_modules/chalk": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-3.0.0.tgz",
+      "integrity": "sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@testing-library/jest-dom/node_modules/dom-accessibility-api": {
+      "version": "0.6.3",
+      "resolved": "https://registry.npmjs.org/dom-accessibility-api/-/dom-accessibility-api-0.6.3.tgz",
+      "integrity": "sha512-7ZgogeTnjuHbo+ct10G9Ffp0mif17idi0IyWNVA/wcwcm7NPOD/WEHVP3n7n3MhXqxoIYm8d6MuZohYWIZ4T3w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@testing-library/react": {
+      "version": "16.3.0",
+      "resolved": "https://registry.npmjs.org/@testing-library/react/-/react-16.3.0.tgz",
+      "integrity": "sha512-kFSyxiEDwv1WLl2fgsq6pPBbw5aWKrsY2/noi1Id0TK0UParSF62oFQFGHXIyaG4pp2tEub/Zlel+fjjZILDsw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/runtime": "^7.12.5"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "peerDependencies": {
+        "@testing-library/dom": "^10.0.0",
+        "@types/react": "^18.0.0 || ^19.0.0",
+        "@types/react-dom": "^18.0.0 || ^19.0.0",
+        "react": "^18.0.0 || ^19.0.0",
+        "react-dom": "^18.0.0 || ^19.0.0"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@testing-library/user-event": {
+      "version": "14.6.1",
+      "resolved": "https://registry.npmjs.org/@testing-library/user-event/-/user-event-14.6.1.tgz",
+      "integrity": "sha512-vq7fv0rnt+QTXgPxr5Hjc210p6YKq2kmdziLgnsZGgLJ9e6VAShx1pACLuRjd/AS/sr7phAR58OIIpf0LlmQNw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12",
+        "npm": ">=6"
+      },
+      "peerDependencies": {
+        "@testing-library/dom": ">=7.21.4"
+      }
+    },
     "node_modules/@trysound/sax": {
       "version": "0.2.0",
       "resolved": "https://registry.npmjs.org/@trysound/sax/-/sax-0.2.0.tgz",
       "integrity": "sha512-L7z9BgrNEcYyUYtF+HaEfiS5ebkh9jXqbszz7pC0hRBPaatV0XjSD3+eHrpqFemQfgwiFF0QPIarnIihIDn7OA==",
       "dev": true,
       "license": "ISC",
       "engines": {
         "node": ">=10.13.0"
       }
     },
     "node_modules/@tybys/wasm-util": {
       "version": "0.9.0",
       "resolved": "https://registry.npmjs.org/@tybys/wasm-util/-/wasm-util-0.9.0.tgz",
       "integrity": "sha512-6+7nlbMVX/PVDCwaIQ8nTOPveOcFLSt8GcXdx8hD0bt39uWxYT88uXzqTd4fTvqta7oeUJqudepapKNt2DYJFw==",
       "dev": true,
       "license": "MIT",
       "optional": true,
       "dependencies": {
         "tslib": "^2.4.0"
       }
     },
+    "node_modules/@types/aria-query": {
+      "version": "5.0.4",
+      "resolved": "https://registry.npmjs.org/@types/aria-query/-/aria-query-5.0.4.tgz",
+      "integrity": "sha512-rfT93uj5s0PRL7EzccGMs3brplhcrghnDoV26NqKhCAS1hVo+WdNsPvE/yb6ilfr5hi2MEk6d5EWJTKdxg8jVw==",
+      "dev": true,
+      "license": "MIT",
+      "peer": true
+    },
     "node_modules/@types/babel__core": {
       "version": "7.20.5",
       "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
       "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "@babel/parser": "^7.20.7",
         "@babel/types": "^7.20.7",
         "@types/babel__generator": "*",
         "@types/babel__template": "*",
         "@types/babel__traverse": "*"
       }
     },
     "node_modules/@types/babel__generator": {
       "version": "7.27.0",
       "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
       "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "@babel/types": "^7.0.0"
       }
     },
     "node_modules/@types/babel__template": {
@@ -6227,50 +6399,57 @@
       "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-2.3.1.tgz",
       "integrity": "sha512-6Fv1DV/TYw//QF5IzQdqsNDjx/wc8TrMBZsqjL9eW01tWb7R7k/mq+/VXfJCl7SoD5emsJop9cOByJZfs8hYIw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "mdn-data": "2.0.30",
         "source-map-js": "^1.0.1"
       },
       "engines": {
         "node": "^10 || ^12.20.0 || ^14.13.0 || >=15.0.0"
       }
     },
     "node_modules/css-what": {
       "version": "6.1.0",
       "resolved": "https://registry.npmjs.org/css-what/-/css-what-6.1.0.tgz",
       "integrity": "sha512-HTUrgRJ7r4dsZKU6GjmpfRK1O76h97Z8MfS1G0FozR+oF2kG6Vfe8JE6zwrkbxigziPHinCJ+gCPjA9EaBDtRw==",
       "dev": true,
       "license": "BSD-2-Clause",
       "engines": {
         "node": ">= 6"
       },
       "funding": {
         "url": "https://github.com/sponsors/fb55"
       }
     },
+    "node_modules/css.escape": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/css.escape/-/css.escape-1.5.1.tgz",
+      "integrity": "sha512-YUifsXXuknHlUsmlgyY0PKzgPOr7/FjCePfHNt0jxm83wHZi44VDMQ7/fGNkjY3/jV1MC+1CmZbaHzugyeRtpg==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/csso": {
       "version": "5.0.5",
       "resolved": "https://registry.npmjs.org/csso/-/csso-5.0.5.tgz",
       "integrity": "sha512-0LrrStPOdJj+SPCCrGhzryycLjwcgUSHBtxNA8aIDxf0GLsRh1cKYhB00Gd1lDOS4yGH69+SNn13+TWbVHETFQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "css-tree": "~2.2.0"
       },
       "engines": {
         "node": "^10 || ^12.20.0 || ^14.13.0 || >=15.0.0",
         "npm": ">=7.0.0"
       }
     },
     "node_modules/csso/node_modules/css-tree": {
       "version": "2.2.1",
       "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-2.2.1.tgz",
       "integrity": "sha512-OA0mILzGc1kCOCSJerOeqDxDQ4HOh+G8NbOJFOTgOCzpw7fCBubk0fEyxp8AgOL/jvLgYA/uV0cMbe43ElF1JA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "mdn-data": "2.0.28",
         "source-map-js": "^1.0.1"
       },
       "engines": {
@@ -6452,50 +6631,61 @@
       "engines": {
         "node": ">= 0.4"
       },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
       }
     },
     "node_modules/define-properties": {
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
       "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "define-data-property": "^1.0.1",
         "has-property-descriptors": "^1.0.0",
         "object-keys": "^1.1.1"
       },
       "engines": {
         "node": ">= 0.4"
       },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/dequal": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/dequal/-/dequal-2.0.3.tgz",
+      "integrity": "sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==",
+      "dev": true,
+      "license": "MIT",
+      "peer": true,
+      "engines": {
+        "node": ">=6"
+      }
+    },
     "node_modules/detect-libc": {
       "version": "2.0.3",
       "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.3.tgz",
       "integrity": "sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==",
       "license": "Apache-2.0",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/detect-newline": {
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
       "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
       "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/diff-sequences": {
       "version": "29.6.3",
       "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz",
       "integrity": "sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==",
       "dev": true,
       "license": "MIT",
@@ -6505,50 +6695,58 @@
     },
     "node_modules/dnd-core": {
       "version": "16.0.1",
       "resolved": "https://registry.npmjs.org/dnd-core/-/dnd-core-16.0.1.tgz",
       "integrity": "sha512-HK294sl7tbw6F6IeuK16YSBUoorvHpY8RHO+9yFfaJyCDVb6n7PRcezrOEOa2SBCqiYpemh5Jx20ZcjKdFAVng==",
       "license": "MIT",
       "dependencies": {
         "@react-dnd/asap": "^5.0.1",
         "@react-dnd/invariant": "^4.0.1",
         "redux": "^4.2.0"
       }
     },
     "node_modules/doctrine": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
       "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
       "dev": true,
       "license": "Apache-2.0",
       "dependencies": {
         "esutils": "^2.0.2"
       },
       "engines": {
         "node": ">=0.10.0"
       }
     },
+    "node_modules/dom-accessibility-api": {
+      "version": "0.5.16",
+      "resolved": "https://registry.npmjs.org/dom-accessibility-api/-/dom-accessibility-api-0.5.16.tgz",
+      "integrity": "sha512-X7BJ2yElsnOJ30pZF4uIIDfBEVgF4XEBxL9Bxhy6dnrm5hkzqmsWHGTiHqRiITNhMyFLyAiWndIJP7Z1NTteDg==",
+      "dev": true,
+      "license": "MIT",
+      "peer": true
+    },
     "node_modules/dom-serializer": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-2.0.0.tgz",
       "integrity": "sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "domelementtype": "^2.3.0",
         "domhandler": "^5.0.2",
         "entities": "^4.2.0"
       },
       "funding": {
         "url": "https://github.com/cheeriojs/dom-serializer?sponsor=1"
       }
     },
     "node_modules/domelementtype": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.3.0.tgz",
       "integrity": "sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==",
       "dev": true,
       "funding": [
         {
           "type": "github",
           "url": "https://github.com/sponsors/fb55"
         }
@@ -8046,50 +8244,60 @@
       "license": "MIT",
       "dependencies": {
         "pkg-dir": "^4.2.0",
         "resolve-cwd": "^3.0.0"
       },
       "bin": {
         "import-local-fixture": "fixtures/cli.js"
       },
       "engines": {
         "node": ">=8"
       },
       "funding": {
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
     "node_modules/imurmurhash": {
       "version": "0.1.4",
       "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
       "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
       "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=0.8.19"
       }
     },
+    "node_modules/indent-string": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
+      "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/inflight": {
       "version": "1.0.6",
       "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
       "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
       "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
       "dev": true,
       "license": "ISC",
       "dependencies": {
         "once": "^1.3.0",
         "wrappy": "1"
       }
     },
     "node_modules/inherits": {
       "version": "2.0.4",
       "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
       "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
       "dev": true,
       "license": "ISC"
     },
     "node_modules/internal-slot": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
       "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
       "dev": true,
       "license": "MIT",
@@ -10062,50 +10270,57 @@
       }
     },
     "node_modules/lines-and-columns": {
       "version": "1.2.4",
       "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
       "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
       "dev": true,
       "license": "MIT"
     },
     "node_modules/locate-path": {
       "version": "6.0.0",
       "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
       "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "p-locate": "^5.0.0"
       },
       "engines": {
         "node": ">=10"
       },
       "funding": {
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/lodash": {
+      "version": "4.17.21",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
+      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/lodash.debounce": {
       "version": "4.0.8",
       "resolved": "https://registry.npmjs.org/lodash.debounce/-/lodash.debounce-4.0.8.tgz",
       "integrity": "sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==",
       "dev": true,
       "license": "MIT"
     },
     "node_modules/lodash.memoize": {
       "version": "4.1.2",
       "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
       "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
       "dev": true,
       "license": "MIT"
     },
     "node_modules/lodash.merge": {
       "version": "4.6.2",
       "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
       "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
       "dev": true,
       "license": "MIT"
     },
     "node_modules/loose-envify": {
       "version": "1.4.0",
       "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
       "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
@@ -10115,50 +10330,61 @@
       },
       "bin": {
         "loose-envify": "cli.js"
       }
     },
     "node_modules/lower-case": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
       "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "tslib": "^2.0.3"
       }
     },
     "node_modules/lru-cache": {
       "version": "5.1.1",
       "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
       "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
       "dev": true,
       "license": "ISC",
       "dependencies": {
         "yallist": "^3.0.2"
       }
     },
+    "node_modules/lz-string": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/lz-string/-/lz-string-1.5.0.tgz",
+      "integrity": "sha512-h5bgJWpxJNswbU7qCrV0tIKQCaS3blPDrqKWx+QxzuzL1zGUzij9XCWLrSLsJPu5t+eWA/ycetzYAO5IOMcWAQ==",
+      "dev": true,
+      "license": "MIT",
+      "peer": true,
+      "bin": {
+        "lz-string": "bin/bin.js"
+      }
+    },
     "node_modules/make-dir": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
       "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "semver": "^7.5.3"
       },
       "engines": {
         "node": ">=10"
       },
       "funding": {
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
     "node_modules/make-dir/node_modules/semver": {
       "version": "7.7.2",
       "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
       "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
       "dev": true,
       "license": "ISC",
       "bin": {
         "semver": "bin/semver.js"
       },
@@ -10219,50 +10445,60 @@
     },
     "node_modules/micromatch": {
       "version": "4.0.8",
       "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
       "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "braces": "^3.0.3",
         "picomatch": "^2.3.1"
       },
       "engines": {
         "node": ">=8.6"
       }
     },
     "node_modules/mimic-fn": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
       "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
       "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=6"
       }
     },
+    "node_modules/min-indent": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/min-indent/-/min-indent-1.0.1.tgz",
+      "integrity": "sha512-I9jwMn07Sy/IwOj3zVkVik2JTvgpaykDZEigL6Rx6N9LbMywwUSMtxET+7lVoDLLd3O3IXwJwvuuns8UB/HeAg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
     "node_modules/mini-svg-data-uri": {
       "version": "1.4.4",
       "resolved": "https://registry.npmjs.org/mini-svg-data-uri/-/mini-svg-data-uri-1.4.4.tgz",
       "integrity": "sha512-r9deDe9p5FJUPZAk3A59wGH7Ii9YrjjWw0jmw/liSbHl2CHiyXj6FcDXDu2K3TjVAXqiJdaw3xxwlZZr9E6nHg==",
       "license": "MIT",
       "bin": {
         "mini-svg-data-uri": "cli.js"
       }
     },
     "node_modules/minimatch": {
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
       "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
       "dev": true,
       "license": "ISC",
       "dependencies": {
         "brace-expansion": "^1.1.7"
       },
       "engines": {
         "node": "*"
       }
     },
     "node_modules/minimist": {
       "version": "1.2.8",
       "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
@@ -11138,50 +11374,64 @@
       }
     },
     "node_modules/react-dropzone": {
       "version": "14.3.8",
       "resolved": "https://registry.npmjs.org/react-dropzone/-/react-dropzone-14.3.8.tgz",
       "integrity": "sha512-sBgODnq+lcA4P296DY4wacOZz3JFpD99fp+hb//iBO2HHnyeZU3FwWyXJ6salNpqQdsZrgMrotuko/BdJMV8Ug==",
       "license": "MIT",
       "dependencies": {
         "attr-accept": "^2.2.4",
         "file-selector": "^2.1.0",
         "prop-types": "^15.8.1"
       },
       "engines": {
         "node": ">= 10.13"
       },
       "peerDependencies": {
         "react": ">= 16.8 || 18.0.0"
       }
     },
     "node_modules/react-is": {
       "version": "16.13.1",
       "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
       "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
       "license": "MIT"
     },
+    "node_modules/redent": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/redent/-/redent-3.0.0.tgz",
+      "integrity": "sha512-6tDA8g98We0zd0GvVeMT9arEOnTw9qM03L9cJXaCjrip1OO764RDBLBfrB4cwzNGDj5OA5ioymC9GkizgWJDUg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "indent-string": "^4.0.0",
+        "strip-indent": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/redux": {
       "version": "4.2.1",
       "resolved": "https://registry.npmjs.org/redux/-/redux-4.2.1.tgz",
       "integrity": "sha512-LAUYz4lc+Do8/g7aeRa8JkyDErK6ekstQaqWQrNRW//MY1TvCEpMtpTWvlQ+FPbWCx+Xixu/6SHt5N0HR+SB4w==",
       "license": "MIT",
       "dependencies": {
         "@babel/runtime": "^7.9.2"
       }
     },
     "node_modules/reflect.getprototypeof": {
       "version": "1.0.10",
       "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
       "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "call-bind": "^1.0.8",
         "define-properties": "^1.2.1",
         "es-abstract": "^1.23.9",
         "es-errors": "^1.3.0",
         "es-object-atoms": "^1.0.0",
         "get-intrinsic": "^1.2.7",
         "get-proto": "^1.0.1",
         "which-builtin-type": "^1.2.1"
       },
@@ -12028,50 +12278,63 @@
       },
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/strip-bom": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
       "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
       "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=4"
       }
     },
     "node_modules/strip-final-newline": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
       "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
       "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=6"
       }
     },
+    "node_modules/strip-indent": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/strip-indent/-/strip-indent-3.0.0.tgz",
+      "integrity": "sha512-laJTa3Jb+VQpaC6DseHhF7dXVqHTfJPCRDaEbid/drOhgitgYku/letMUqOXFoWV0zIIUbjpdH2t+tYj4bQMRQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "min-indent": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/strip-json-comments": {
       "version": "3.1.1",
       "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
       "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
       "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
       },
       "funding": {
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
     "node_modules/styled-jsx": {
       "version": "5.1.6",
       "resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.1.6.tgz",
       "integrity": "sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==",
       "license": "MIT",
       "dependencies": {
         "client-only": "0.0.1"
       },
       "engines": {
         "node": ">= 12.0.0"
       },
       "peerDependencies": {
diff --git a/frontend/package.json b/frontend/package.json
index 4aab4c8d88706455dcdfb001dfd2b8d93efc1cdc..94d66fadfa0c579179770ffccd42682218bb39d3 100644
--- a/frontend/package.json
+++ b/frontend/package.json
@@ -14,49 +14,52 @@
     "@fullcalendar/daygrid": "^6.1.15",
     "@fullcalendar/interaction": "^6.1.15",
     "@fullcalendar/list": "^6.1.15",
     "@fullcalendar/react": "^6.1.15",
     "@fullcalendar/timegrid": "^6.1.15",
     "@react-jvectormap/core": "^1.0.4",
     "@react-jvectormap/world": "^1.1.2",
     "@tailwindcss/forms": "^0.5.9",
     "@tailwindcss/postcss": "^4.0.9",
     "apexcharts": "^4.3.0",
     "autoprefixer": "^10.4.20",
     "flatpickr": "^4.6.13",
     "next": "15.2.3",
     "react": "^19.0.0",
     "react-apexcharts": "^1.7.0",
     "react-dnd": "^16.0.1",
     "react-dnd-html5-backend": "^16.0.1",
     "react-dom": "^19.0.0",
     "react-dropzone": "^14.3.5",
     "swiper": "^11.2.0",
     "tailwind-merge": "^2.6.0"
   },
   "devDependencies": {
     "@eslint/eslintrc": "^3",
     "@svgr/webpack": "^8.1.0",
+    "@testing-library/jest-dom": "^6.6.3",
+    "@testing-library/react": "^16.3.0",
+    "@testing-library/user-event": "^14.6.1",
     "@types/node": "^20",
     "@types/react": "^19",
     "@types/react-dom": "^19",
     "@types/react-transition-group": "^4.4.12",
     "eslint": "^9",
     "eslint-config-next": "15.1.3",
     "jest": "^29.7.0",
     "jest-environment-jsdom": "^30.0.2",
     "postcss": "^8",
     "tailwindcss": "^4.0.0",
     "ts-jest": "^29.0.0",
     "typescript": "^5"
   },
   "overrides": {
     "@react-jvectormap/core": {
       "react": "^16.8.0 || ^17 || ^18 || ^19",
       "react-dom": "^16.8.0 || ^17 || ^18 || ^19"
     },
     "@react-jvectormap/world": {
       "react": "^16.8.0 || ^17 || ^18 || ^19",
       "react-dom": "^16.8.0 || ^17 || ^18 || ^19"
     }
   }
 }
diff --git a/frontend/public/robots.txt b/frontend/public/robots.txt
new file mode 100644
index 0000000000000000000000000000000000000000..1f53798bb4fe33c86020be7f10c44f29486fd190
--- /dev/null
+++ b/frontend/public/robots.txt
@@ -0,0 +1,2 @@
+User-agent: *
+Disallow: /
diff --git a/frontend/src/__tests__/AuthContext.test.tsx b/frontend/src/__tests__/AuthContext.test.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..6af43b56521561d0f8949d2a5ad6f199d93b6597
--- /dev/null
+++ b/frontend/src/__tests__/AuthContext.test.tsx
@@ -0,0 +1,43 @@
+import { render, screen } from '@testing-library/react';
+import userEvent from '@testing-library/user-event';
+import React from 'react';
+import { AuthProvider, useAuth } from '../context/AuthContext';
+
+function makeToken(role: string = 'admin') {
+  const payload = {
+    sub: 1,
+    role,
+    exp: Math.floor(Date.now() / 1000) + 60,
+  };
+  const base64 = Buffer.from(JSON.stringify(payload))
+    .toString('base64')
+    .replace(/\+/g, '-')
+    .replace(/\//g, '_')
+    .replace(/=+$/, '');
+  return `header.${base64}.sig`;
+}
+
+const TestComponent = () => {
+  const { user, login, logout } = useAuth();
+  return (
+    <div>
+      <span data-testid="username">{user ? user.username : 'none'}</span>
+      <button onClick={() => login(makeToken())}>login</button>
+      <button onClick={logout}>logout</button>
+    </div>
+  );
+};
+
+test('login and logout update user state', async () => {
+  render(
+    <AuthProvider>
+      <TestComponent />
+    </AuthProvider>
+  );
+  const user = userEvent.setup();
+  expect(screen.getByTestId('username').textContent).toBe('none');
+  await user.click(screen.getByText('login'));
+  expect(screen.getByTestId('username').textContent).toBe('1');
+  await user.click(screen.getByText('logout'));
+  expect(screen.getByTestId('username').textContent).toBe('none');
+});
diff --git a/frontend/src/__tests__/RequireRole.test.tsx b/frontend/src/__tests__/RequireRole.test.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..6a9248b485d7766e5108575a50bc639970c615bc
--- /dev/null
+++ b/frontend/src/__tests__/RequireRole.test.tsx
@@ -0,0 +1,47 @@
+import { render, screen } from '@testing-library/react';
+import React from 'react';
+import RequireRole from '@/components/auth/RequireRole';
+import { Role } from '@/types';
+import { useRouter } from 'next/navigation';
+import { useAuth } from '@/context/AuthContext';
+
+jest.mock('next/navigation', () => ({ useRouter: jest.fn() }));
+jest.mock('@/context/AuthContext', () => ({ useAuth: jest.fn() }));
+
+const mockedRouter = { replace: jest.fn() };
+(useRouter as jest.Mock).mockReturnValue(mockedRouter);
+
+const mockUseAuth = useAuth as jest.Mock;
+
+test('shows spinner when loading', () => {
+  mockUseAuth.mockReturnValue({ user: null, loading: true });
+  render(
+    <RequireRole roles={[Role.Admin]}>
+      <div>secret</div>
+    </RequireRole>
+  );
+  expect(screen.getByRole('status')).toBeInTheDocument();
+});
+
+test('redirects unauthenticated user', () => {
+  mockUseAuth.mockReturnValue({ user: null, loading: false });
+  render(
+    <RequireRole roles={[Role.Admin]}>
+      <div>secret</div>
+    </RequireRole>
+  );
+  expect(mockedRouter.replace).toHaveBeenCalledWith('/login');
+});
+
+test('renders children when authorized', () => {
+  mockUseAuth.mockReturnValue({
+    user: { username: 'x', role: Role.Admin },
+    loading: false,
+  });
+  render(
+    <RequireRole roles={[Role.Admin]}>
+      <div>secret</div>
+    </RequireRole>
+  );
+  expect(screen.getByText('secret')).toBeInTheDocument();
+});
diff --git a/frontend/src/__tests__/Sidebar.test.tsx b/frontend/src/__tests__/Sidebar.test.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..c1b7c2d51b25ba9884e34a9382403c8ca68f1ceb
--- /dev/null
+++ b/frontend/src/__tests__/Sidebar.test.tsx
@@ -0,0 +1,29 @@
+import { render, screen } from '@testing-library/react';
+import React from 'react';
+import AppSidebar from '@/layout/AppSidebar';
+import { useSidebar } from '@/context/SidebarContext';
+import { useAuth } from '@/context/AuthContext';
+
+jest.mock('@/context/SidebarContext', () => ({ useSidebar: jest.fn() }));
+jest.mock('@/context/AuthContext', () => ({ useAuth: jest.fn() }));
+jest.mock("@/icons", () => ({ ChevronDownIcon: () => <span />, GridIcon: () => <span />, HorizontaLDots: () => <span /> }));
+
+const mockSidebar = {
+  isExpanded: true,
+  isMobileOpen: false,
+  isHovered: false,
+  setIsHovered: jest.fn(),
+};
+(useSidebar as jest.Mock).mockReturnValue(mockSidebar);
+
+const mockUseAuth = useAuth as jest.Mock;
+
+test('shows admin link only for admin role', () => {
+  mockUseAuth.mockReturnValue({ user: { username: 'a', role: 'admin' }, loading: false });
+  const { rerender } = render(<AppSidebar />);
+  expect(screen.getByText('Админ')).toBeInTheDocument();
+
+  mockUseAuth.mockReturnValue({ user: { username: 'a', role: 'viewer' }, loading: false });
+  rerender(<AppSidebar />);
+  expect(screen.queryByText('Админ')).toBeNull();
+});
diff --git a/frontend/src/__tests__/SignInForm.test.tsx b/frontend/src/__tests__/SignInForm.test.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..1edad9768fbf6d236ef70c8a1fef3d29aa94d30c
--- /dev/null
+++ b/frontend/src/__tests__/SignInForm.test.tsx
@@ -0,0 +1,23 @@
+import { render, screen } from '@testing-library/react';
+import userEvent from '@testing-library/user-event';
+import React from 'react';
+import SignInForm from '@/components/auth/SignInForm';
+import { useRouter } from "next/navigation";
+import { useAuth } from '@/context/AuthContext';
+
+jest.mock("next/navigation", () => ({ useRouter: jest.fn() }));
+jest.mock('@/context/AuthContext', () => ({ useAuth: jest.fn(() => ({ login: jest.fn() })) }));
+
+jest.mock("@/icons", () => ({ ChevronLeftIcon: () => <span />, EyeIcon: () => <span />, EyeCloseIcon: () => <span /> }));
+test('client side validation prevents submit', async () => {
+  global.fetch = jest.fn();
+  (useRouter as jest.Mock).mockReturnValue({ push: jest.fn() });
+  render(<SignInForm />);
+  const user = userEvent.setup();
+  await user.type(screen.getByPlaceholderText('admin'), 'ad');
+  await user.type(screen.getByPlaceholderText('Enter your password'), '123');
+  await user.click(screen.getByRole('button', { name: /^Войти$/i }));
+  expect(screen.getByText(/Username must be at least 3/)).toBeInTheDocument();
+  expect(screen.getByText(/Password must be at least 6/)).toBeInTheDocument();
+  expect(global.fetch).not.toHaveBeenCalled();
+});
diff --git a/frontend/src/app/(full-width-pages)/(auth)/login/LoginClient.tsx b/frontend/src/app/(full-width-pages)/(auth)/login/LoginClient.tsx
index f3d2efad3e8c1cc16a8b7daa63f1bf7f85851367..bb8a31e6fcf003ae888f5b64b0d0159fbd13eb3c 100644
--- a/frontend/src/app/(full-width-pages)/(auth)/login/LoginClient.tsx
+++ b/frontend/src/app/(full-width-pages)/(auth)/login/LoginClient.tsx
@@ -1,125 +1,170 @@
 'use client';
 import Checkbox from '@/components/form/input/Checkbox';
 import Input from '@/components/form/input/InputField';
 import Label from '@/components/form/Label';
 import Button from '@/components/ui/button/Button';
 import Spinner from '@/components/ui/Spinner';
 import { EyeCloseIcon, EyeIcon } from '@/icons';
 import { useAuth } from '@/context/AuthContext';
 import { useRouter } from 'next/navigation';
 import { useEffect, useState } from 'react';
 
 export default function LoginClient() {
   const { user, login } = useAuth();
   const router = useRouter();
 
   const [showPassword, setShowPassword] = useState(false);
   const [isChecked, setIsChecked] = useState(false);
   const [username, setUsername] = useState('');
   const [password, setPassword] = useState('');
   const [loading, setLoading] = useState(false);
   const [error, setError] = useState('');
+  const [usernameError, setUsernameError] = useState('');
+  const [passwordError, setPasswordError] = useState('');
 
   useEffect(() => {
     if (user) {
       router.replace('/');
     }
   }, [user, router]);
 
+  function validate() {
+    let valid = true;
+    if (username.trim().length < 3) {
+      setUsernameError('Username must be at least 3 characters');
+      valid = false;
+    } else {
+      setUsernameError('');
+    }
+    if (password.length < 6) {
+      setPasswordError('Password must be at least 6 characters');
+      valid = false;
+    } else {
+      setPasswordError('');
+    }
+    return valid;
+  }
+
   async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
     e.preventDefault();
+    if (!validate()) {
+      return;
+    }
     setLoading(true);
     setError('');
     try {
       const res = await fetch('/api/auth/login', {
         method: 'POST',
         headers: {
           'Content-Type': 'application/json',
         },
         body: JSON.stringify({ username, password }),
       });
       if (res.ok) {
         const data = await res.json();
         login(data.access_token);
         router.push('/');
       } else if (res.status === 401) {
         setError('Invalid credentials');
       } else {
         setError('Server error');
       }
     } catch {
       setError('Ошибка сети');
     } finally {
       setLoading(false);
     }
   }
 
   return (
     <div className="flex flex-col flex-1 lg:w-1/2 w-full">
       <div className="flex flex-col justify-center flex-1 w-full max-w-md mx-auto">
         <div>
           <div className="mb-5 sm:mb-8">
             <h1 className="mb-2 font-semibold text-gray-800 text-title-sm dark:text-white/90 sm:text-title-md">
               Вход
             </h1>
             <p className="text-sm text-gray-500 dark:text-gray-400">Введите логин и пароль для входа</p>
           </div>
           <form onSubmit={handleSubmit}>
             <div className="space-y-6">
               <div>
                 <Label>
                   Логин <span className="text-error-500">*</span>
                 </Label>
                 <Input
                   type="text"
+                  autoFocus
                   value={username}
-                  onChange={(e) => setUsername(e.target.value)}
+                  onChange={(e) => {
+                    setUsername(e.target.value);
+                    if (e.target.value.trim().length >= 3) {
+                      setUsernameError('');
+                    }
+                  }}
+                  error={!!usernameError}
+                  hint={usernameError}
                 />
               </div>
               <div>
                 <Label>
                   Пароль <span className="text-error-500">*</span>
                 </Label>
                 <div className="relative">
                   <Input
                     type={showPassword ? 'text' : 'password'}
                     value={password}
-                    onChange={(e) => setPassword(e.target.value)}
+                    onChange={(e) => {
+                      setPassword(e.target.value);
+                      if (e.target.value.length >= 6) {
+                        setPasswordError('');
+                      }
+                    }}
+                    error={!!passwordError}
+                    hint={passwordError}
                   />
                   <span
                     onClick={() => setShowPassword(!showPassword)}
-                    className="absolute z-30 -translate-y-1/2 cursor-pointer right-4 top-1/2"
+                    onKeyDown={(e) => e.key === 'Enter' && setShowPassword(!showPassword)}
+                    tabIndex={0}
+                    role="button"
+                    aria-label="Toggle password visibility"
+                    className="absolute z-30 -translate-y-1/2 cursor-pointer right-4 top-1/2 focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-500"
                   >
                     {showPassword ? (
                       <EyeIcon className="fill-gray-500 dark:fill-gray-400" />
                     ) : (
                       <EyeCloseIcon className="fill-gray-500 dark:fill-gray-400" />
                     )}
                   </span>
                 </div>
               </div>
               <div className="flex items-center gap-3">
                 <Checkbox checked={isChecked} onChange={setIsChecked} />
                 <span className="block font-normal text-gray-700 text-theme-sm dark:text-gray-400">
                   Запомнить меня
                 </span>
               </div>
-              {error && <p className="text-error-500 text-sm">{error}</p>}
+              {error && (
+                <p className="text-error-600 text-sm" role="alert" aria-live="assertive">
+                  {error}
+                </p>
+              )}
               <div>
                 <Button type="submit" className="w-full" size="sm" disabled={loading}>
                   {loading ? (
                     <span className="flex items-center justify-center gap-2">
                       <Spinner /> Входим...
                     </span>
                   ) : (
                     'Войти'
                   )}
                 </Button>
               </div>
             </div>
           </form>
         </div>
       </div>
     </div>
   );
 }
diff --git a/frontend/src/components/auth/RequireRole.tsx b/frontend/src/components/auth/RequireRole.tsx
index 5e6b6d16c4b8b61f3afbe8f81fe4d6e2691faa73..225876b18ddbb4772da0a27e9360766b0c95b3cc 100644
--- a/frontend/src/components/auth/RequireRole.tsx
+++ b/frontend/src/components/auth/RequireRole.tsx
@@ -1,27 +1,36 @@
 "use client";
 import { useRouter } from "next/navigation";
 import { useEffect } from "react";
 import { useAuth } from "@/context/AuthContext";
 import { Role } from "@/types";
+import Spinner from "@/components/ui/Spinner";
 
 export default function RequireRole({
   children,
   roles,
 }: {
   children: React.ReactNode;
   roles: Role[];
 }) {
-  const { user } = useAuth();
+  const { user, loading } = useAuth();
   const router = useRouter();
 
   useEffect(() => {
-    if (!user) {
-      router.replace("/login");
-    } else if (!roles.includes(user.role)) {
-      router.replace("/unauthorized");
+    if (!loading) {
+      if (!user) {
+        router.replace("/login");
+      } else if (!roles.includes(user.role)) {
+        router.replace("/unauthorized");
+      }
     }
-  }, [user, roles, router]);
+  }, [user, roles, router, loading]);
 
+  if (loading)
+    return (
+      <div className="flex items-center justify-center p-6" role="status">
+        <Spinner />
+      </div>
+    );
   if (!user || !roles.includes(user.role)) return null;
   return <>{children}</>;
 }
diff --git a/frontend/src/components/auth/SignInForm.tsx b/frontend/src/components/auth/SignInForm.tsx
index 5acc3b6348ac41430b047b020822ca01e4d2c2c9..5354a43a16709d8955d827d80361dc633f88bc05 100644
--- a/frontend/src/components/auth/SignInForm.tsx
+++ b/frontend/src/components/auth/SignInForm.tsx
@@ -1,49 +1,71 @@
 "use client";
 import Checkbox from "@/components/form/input/Checkbox";
 import Input from "@/components/form/input/InputField";
 import Label from "@/components/form/Label";
 import Button from "@/components/ui/button/Button";
 import { ChevronLeftIcon, EyeCloseIcon, EyeIcon } from "@/icons";
 import Link from "next/link";
 import React, { useState } from "react";
 import Spinner from "@/components/ui/Spinner";
 import { useAuth } from "@/context/AuthContext";
 import { useRouter } from "next/navigation";
 
 export default function SignInForm() {
   const [showPassword, setShowPassword] = useState(false);
   const [isChecked, setIsChecked] = useState(false);
   const [username, setUsername] = useState("");
   const [password, setPassword] = useState("");
   const { login } = useAuth();
   const router = useRouter();
   const [loading, setLoading] = useState(false);
   const [error, setError] = useState("");
+  const [usernameError, setUsernameError] = useState("");
+  const [passwordError, setPasswordError] = useState("");
+
+  function validate() {
+    let valid = true;
+    if (username.trim().length < 3) {
+      setUsernameError("Username must be at least 3 characters");
+      valid = false;
+    } else {
+      setUsernameError("");
+    }
+    if (password.length < 6) {
+      setPasswordError("Password must be at least 6 characters");
+      valid = false;
+    } else {
+      setPasswordError("");
+    }
+    return valid;
+  }
 
   async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
     e.preventDefault();
+    if (!validate()) {
+      return;
+    }
     setLoading(true);
     setError("");
     try {
       const res = await fetch("/api/auth/login", {
         method: "POST",
         headers: {
           "Content-Type": "application/json",
         },
         body: JSON.stringify({ username, password }),
       });
       if (res.ok) {
         const data = await res.json();
         login(data.access_token);
         router.push("/");
       } else if (res.status === 401) {
         setError("Invalid credentials");
       } else {
         setError("Server error");
       }
     } catch {
       setError("Ошибка сети");
     } finally {
       setLoading(false);
     }
   }
@@ -108,93 +130,114 @@ export default function SignInForm() {
                 >
                   <path d="M15.6705 1.875H18.4272L12.4047 8.75833L19.4897 18.125H13.9422L9.59717 12.4442L4.62554 18.125H1.86721L8.30887 10.7625L1.51221 1.875H7.20054L11.128 7.0675L15.6705 1.875ZM14.703 16.475H16.2305L6.37054 3.43833H4.73137L14.703 16.475Z" />
                 </svg>
                 Войти через X
               </button>
             </div>
             <div className="relative py-3 sm:py-5">
               <div className="absolute inset-0 flex items-center">
                 <div className="w-full border-t border-gray-200 dark:border-gray-800"></div>
               </div>
               <div className="relative flex justify-center text-sm">
                 <span className="p-2 text-gray-400 bg-white dark:bg-gray-900 sm:px-5 sm:py-2">
                   Или
                 </span>
               </div>
             </div>
             <form onSubmit={handleSubmit}>
               <div className="space-y-6">
                 <div>
                   <Label>
                     Username <span className="text-error-500">*</span>{" "}
                   </Label>
                   <Input
                     placeholder="admin"
                     type="text"
+                    autoFocus
                     value={username}
-                    onChange={(e) => setUsername(e.target.value)}
+                    onChange={(e) => {
+                      setUsername(e.target.value);
+                      if (e.target.value.trim().length >= 3) {
+                        setUsernameError("");
+                      }
+                    }}
+                    error={!!usernameError}
+                    hint={usernameError}
                   />
                 </div>
                 <div>
                   <Label>
                     Пароль <span className="text-error-500">*</span>{" "}
                   </Label>
                   <div className="relative">
                     <Input
                       type={showPassword ? "text" : "password"}
                       placeholder="Enter your password"
                       value={password}
-                      onChange={(e) => setPassword(e.target.value)}
+                      onChange={(e) => {
+                        setPassword(e.target.value);
+                        if (e.target.value.length >= 6) {
+                          setPasswordError("");
+                        }
+                      }}
+                      error={!!passwordError}
+                      hint={passwordError}
                     />
                     <span
                       onClick={() => setShowPassword(!showPassword)}
-                      className="absolute z-30 -translate-y-1/2 cursor-pointer right-4 top-1/2"
+                      onKeyDown={(e) => e.key === 'Enter' && setShowPassword(!showPassword)}
+                      tabIndex={0}
+                      role="button"
+                      aria-label="Toggle password visibility"
+                      className="absolute z-30 -translate-y-1/2 cursor-pointer right-4 top-1/2 focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-500"
                     >
                       {showPassword ? (
                         <EyeIcon className="fill-gray-500 dark:fill-gray-400" />
                       ) : (
                         <EyeCloseIcon className="fill-gray-500 dark:fill-gray-400" />
                       )}
                     </span>
                   </div>
                 </div>
                 <div className="flex items-center justify-between">
                   <div className="flex items-center gap-3">
                     <Checkbox checked={isChecked} onChange={setIsChecked} />
                     <span className="block font-normal text-gray-700 text-theme-sm dark:text-gray-400">
                       Запомнить меня
                     </span>
                   </div>
                   <Link
                     href="/reset-password"
                     className="text-sm text-brand-500 hover:text-brand-600 dark:text-brand-400"
                   >
                     Забыли пароль?
                   </Link>
                 </div>
                 {error && (
-                  <p className="text-error-500 text-sm">{error}</p>
+                  <p className="text-error-600 text-sm" role="alert" aria-live="assertive">
+                    {error}
+                  </p>
                 )}
                 <div>
                   <Button type="submit" className="w-full" size="sm" disabled={loading}>
                     {loading ? (
                       <span className="flex items-center justify-center gap-2">
                         <Spinner /> Входим...
                       </span>
                     ) : (
                       "Войти"
                     )}
                   </Button>
                 </div>
               </div>
             </form>
 
             <div className="mt-5">
               <p className="text-sm font-normal text-center text-gray-700 dark:text-gray-400 sm:text-start">
                 Нет аккаунта? {""}
                 <Link
                   href="/signup"
                   className="text-brand-500 hover:text-brand-600 dark:text-brand-400"
                 >
                   Регистрация
                 </Link>
               </p>
diff --git a/frontend/src/components/form/input/Checkbox.tsx b/frontend/src/components/form/input/Checkbox.tsx
index 2f0f2276ca1b12a44a823a262df9fa108e17b587..ed205f2a8afe8dff657cd07e57776698b5cc1e98 100644
--- a/frontend/src/components/form/input/Checkbox.tsx
+++ b/frontend/src/components/form/input/Checkbox.tsx
@@ -5,51 +5,51 @@ interface CheckboxProps {
   checked: boolean;
   className?: string;
   id?: string;
   onChange: (checked: boolean) => void;
   disabled?: boolean;
 }
 
 const Checkbox: React.FC<CheckboxProps> = ({
   label,
   checked,
   id,
   onChange,
   className = "",
   disabled = false,
 }) => {
   return (
     <label
       className={`flex items-center space-x-3 group cursor-pointer ${
         disabled ? "cursor-not-allowed opacity-60" : ""
       }`}
     >
       <div className="relative w-5 h-5">
         <input
           id={id}
           type="checkbox"
-          className={`w-5 h-5 appearance-none cursor-pointer dark:border-gray-700 border border-gray-300 checked:border-transparent rounded-md checked:bg-brand-500 disabled:opacity-60 
+          className={`w-5 h-5 appearance-none cursor-pointer dark:border-gray-700 border border-gray-300 checked:border-transparent rounded-md checked:bg-brand-500 disabled:opacity-60 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-500
           ${className}`}
           checked={checked}
           onChange={(e) => onChange(e.target.checked)}
           disabled={disabled}
         />
         {checked && (
           <svg
             className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 pointer-events-none"
             xmlns="http://www.w3.org/2000/svg"
             width="14"
             height="14"
             viewBox="0 0 14 14"
             fill="none"
           >
             <path
               d="M11.6666 3.5L5.24992 9.91667L2.33325 7"
               stroke="white"
               strokeWidth="1.94437"
               strokeLinecap="round"
               strokeLinejoin="round"
             />
           </svg>
         )}
         {disabled && (
           <svg
diff --git a/frontend/src/components/form/input/InputField.tsx b/frontend/src/components/form/input/InputField.tsx
index 58ce63675652b70b06712f845904807dd9a5e97e..99890fab28a8ec23f7ef80f49d4ba9c0f82739f7 100644
--- a/frontend/src/components/form/input/InputField.tsx
+++ b/frontend/src/components/form/input/InputField.tsx
@@ -14,74 +14,75 @@ interface InputProps {
   step?: number;
   disabled?: boolean;
   success?: boolean;
   error?: boolean;
   hint?: string; // Optional hint text
 }
 
 const Input: FC<InputProps> = ({
   type = "text",
   id,
   name,
   placeholder,
   defaultValue,
   value,
   onChange,
   className = "",
   min,
   max,
   step,
   disabled = false,
   success = false,
   error = false,
   hint,
 }) => {
   // Determine input styles based on state (disabled, success, error)
-  let inputClasses = `h-11 w-full rounded-lg border appearance-none px-4 py-2.5 text-sm shadow-theme-xs placeholder:text-gray-400 focus:outline-hidden focus:ring-3 dark:bg-gray-900 dark:text-white/90 dark:placeholder:text-white/30 dark:focus:border-brand-800 ${className}`;
+  let inputClasses = `h-11 w-full rounded-lg border appearance-none px-4 py-2.5 text-sm shadow-theme-xs placeholder:text-gray-400 focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-500 dark:bg-gray-900 dark:text-white/90 dark:placeholder:text-white/30 dark:focus:border-brand-800 ${className}`;
 
   // Add styles for the different states
   if (disabled) {
     inputClasses += ` text-gray-500 border-gray-300 cursor-not-allowed dark:bg-gray-800 dark:text-gray-400 dark:border-gray-700`;
   } else if (error) {
     inputClasses += ` text-error-800 border-error-500 focus:ring-3 focus:ring-error-500/10  dark:text-error-400 dark:border-error-500`;
   } else if (success) {
     inputClasses += ` text-success-500 border-success-400 focus:ring-success-500/10 focus:border-success-300  dark:text-success-400 dark:border-success-500`;
   } else {
     inputClasses += ` bg-transparent text-gray-800 border-gray-300 focus:border-brand-300 focus:ring-3 focus:ring-brand-500/10 dark:border-gray-700 dark:bg-gray-900 dark:text-white/90 dark:focus:border-brand-800`;
   }
 
   return (
     <div className="relative">
       <input
         type={type}
         id={id}
         name={name}
         placeholder={placeholder}
         defaultValue={defaultValue}
         value={value}
         onChange={onChange}
         min={min}
         max={max}
         step={step}
         disabled={disabled}
+        aria-invalid={error}
         className={inputClasses}
       />
 
       {/* Optional Hint Text */}
       {hint && (
         <p
           className={`mt-1.5 text-xs ${
             error
               ? "text-error-500"
               : success
               ? "text-success-500"
               : "text-gray-500"
           }`}
         >
           {hint}
         </p>
       )}
     </div>
   );
 };
 
 export default Input;
diff --git a/frontend/src/components/ui/button/Button.tsx b/frontend/src/components/ui/button/Button.tsx
index e3bc687ae0386a3518849dd2f7fb1c0993676fe1..e32a155e132fb5eacac55418e0f1c2fc4b6f3d5b 100644
--- a/frontend/src/components/ui/button/Button.tsx
+++ b/frontend/src/components/ui/button/Button.tsx
@@ -18,41 +18,41 @@ const Button: React.FC<ButtonProps> = ({
   variant = "primary",
   startIcon,
   endIcon,
   onClick,
   type = "button",
   className = "",
   disabled = false,
 }) => {
   // Size Classes
   const sizeClasses = {
     sm: "px-4 py-3 text-sm",
     md: "px-5 py-3.5 text-sm",
   };
 
   // Variant Classes
   const variantClasses = {
     primary:
       "bg-brand-500 text-white shadow-theme-xs hover:bg-brand-600 disabled:bg-brand-300",
     outline:
       "bg-white text-gray-700 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-400 dark:ring-gray-700 dark:hover:bg-white/[0.03] dark:hover:text-gray-300",
   };
 
   return (
     <button
       type={type}
-      className={`inline-flex items-center justify-center font-medium gap-2 rounded-lg transition ${className} ${
+      className={`inline-flex items-center justify-center font-medium gap-2 rounded-lg transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-500 ${className} ${
         sizeClasses[size]
       } ${variantClasses[variant]} ${
         disabled ? "cursor-not-allowed opacity-50" : ""
       }`}
       onClick={onClick}
       disabled={disabled}
     >
       {startIcon && <span className="flex items-center">{startIcon}</span>}
       {children}
       {endIcon && <span className="flex items-center">{endIcon}</span>}
     </button>
   );
 };
 
 export default Button;
diff --git a/frontend/src/context/AuthContext.tsx b/frontend/src/context/AuthContext.tsx
index f00b5d0c6b57de7ea39d3fdbd4fd0d70eb23fb4b..b01ee1ba70dcabc07cb84f65536ea21f2af045a1 100644
--- a/frontend/src/context/AuthContext.tsx
+++ b/frontend/src/context/AuthContext.tsx
@@ -1,94 +1,109 @@
 "use client";
-import React, { createContext, useContext, useEffect, useState } from "react";
+import React, {
+  createContext,
+  useContext,
+  useEffect,
+  useState,
+  useRef,
+} from "react";
 import { Role } from "@/types";
+import { parseJwt, isExpired } from "@/utils/jwt";
 
 export type User = {
   username: string;
   role: Role;
 };
 
 interface AuthContextType {
   user: User | null;
   setUser: (user: User | null) => void;
   login: (token: string) => void;
   logout: () => void;
+  loading: boolean;
 }
 
 const AuthContext = createContext<AuthContextType | null>(null);
 
-interface TokenPayload {
-  sub: string; // username
-  role: Role;
-  exp: number;
-}
 
-function parseJwt(token: string): TokenPayload | null {
-  try {
-    const base64 = token.split(".")[1].replace(/-/g, "+").replace(/_/g, "/");
-    return JSON.parse(atob(base64)) as TokenPayload;
-  } catch {
-    return null;
-  }
-}
 
 function getCookie(name: string): string | null {
   if (typeof document === "undefined") return null;
   const match = document.cookie.match(new RegExp(`(^| )${name}=([^;]+)`));
   return match ? match[2] : null;
 }
 
 export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
   children,
 }) => {
   const [user, setUser] = useState<User | null>(null);
+  const [loading, setLoading] = useState(true);
+  const logoutTimer = useRef<NodeJS.Timeout>();
+
+  const clearTimer = () => {
+    if (logoutTimer.current) clearTimeout(logoutTimer.current);
+  };
+
+  const scheduleLogout = (exp: number) => {
+    clearTimer();
+    const ms = exp * 1000 - Date.now();
+    if (ms <= 0) {
+      logout();
+      window.location.href = "/login";
+    } else {
+      logoutTimer.current = setTimeout(() => {
+        logout();
+        window.location.href = "/login";
+      }, ms);
+    }
+  };
 
   const login = (token: string) => {
     const payload = parseJwt(token);
-    if (payload && payload.exp * 1000 > Date.now()) {
-      setUser({
-        username: payload.sub,
-        role: payload.role as Role,
-      });
+    if (!isExpired(payload)) {
+      setUser({ username: String(payload!.sub), role: payload!.role as Role });
       localStorage.setItem("token", token);
       document.cookie = `token=${token}; path=/; SameSite=Lax`;
+      scheduleLogout(payload!.exp);
+      setLoading(false);
     } else {
-      setUser(null);
-      localStorage.removeItem("token");
-      document.cookie = "token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT";
+      logout();
     }
   };
 
   const logout = () => {
+    clearTimer();
     setUser(null);
     localStorage.removeItem("token");
     document.cookie = "token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT";
+    setLoading(false);
   };
 
   useEffect(() => {
     const stored =
       typeof window !== "undefined" ? localStorage.getItem("token") : null;
     const cookieToken = getCookie("token");
     const token = stored || cookieToken;
     if (token) {
       const payload = parseJwt(token);
-      if (payload && payload.exp * 1000 > Date.now()) {
+      if (!isExpired(payload)) {
         login(token);
       } else {
-        localStorage.removeItem("token");
-        document.cookie = "token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT";
+        logout();
       }
+    } else {
+      setLoading(false);
     }
   }, []);
 
   return (
-    <AuthContext.Provider value={{ user, setUser, login, logout }}>
+    <AuthContext.Provider value={{ user, setUser, login, logout, loading }}>
       {children}
     </AuthContext.Provider>
   );
 };
 
 export const useAuth = () => {
   const ctx = useContext(AuthContext);
   if (!ctx) throw new Error("useAuth must be used within AuthProvider");
   return ctx;
 };
diff --git a/frontend/src/utils/jwt.ts b/frontend/src/utils/jwt.ts
new file mode 100644
index 0000000000000000000000000000000000000000..06909d17e3f7dbfeeabe92390af2c2c9342d1861
--- /dev/null
+++ b/frontend/src/utils/jwt.ts
@@ -0,0 +1,18 @@
+export interface TokenPayload {
+  sub: number;
+  role: string;
+  exp: number;
+}
+
+export function parseJwt(token: string): TokenPayload | null {
+  try {
+    const base64 = token.split('.')[1].replace(/-/g, '+').replace(/_/g, '/');
+    return JSON.parse(atob(base64)) as TokenPayload;
+  } catch {
+    return null;
+  }
+}
+
+export function isExpired(payload: TokenPayload | null): boolean {
+  return !payload || payload.exp * 1000 <= Date.now();
+}
diff --git a/nginx/john-galt.conf b/nginx/john-galt.conf
index b26253e6f5ffc6f3569ae96d75bd3f7f513aab8f..492a1376fe2cf08e522a111a200312142983d7d6 100644
--- a/nginx/john-galt.conf
+++ b/nginx/john-galt.conf
@@ -1,40 +1,56 @@
 # Node.js SSR server for Next.js
 upstream frontend {
     server 127.0.0.1:3000;
 }
 
 # FastAPI backend
 upstream api {
     server 127.0.0.1:8000;
 }
 
 server {
-    # HTTP entry point. HTTPS termination could be handled by a load balancer or
-    # additional nginx configuration.
     listen 80;
     server_name example.com;
+    return 301 https://$host$request_uri;
+}
+
+server {
+    listen 443 ssl http2;
+    server_name example.com;
+    ssl_certificate /etc/ssl/certs/john_galt.crt;
+    ssl_certificate_key /etc/ssl/private/john_galt.key;
+    server_tokens off;
+    add_header X-Frame-Options "DENY" always;
+    add_header X-Content-Type-Options "nosniff" always;
+    add_header Referrer-Policy "same-origin" always;
+    add_header X-Robots-Tag "noindex, nofollow" always;
+    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains" always;
+
+    if ($request_method !~ ^(GET|POST)$) {
+        return 405;
+    }
 
     client_max_body_size 20m;
 
     location /api/ {
         proxy_pass http://api;
         proxy_set_header Host $host;
         proxy_set_header X-Real-IP $remote_addr;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header X-Forwarded-Proto $scheme;
     }
 
     # Serve Next.js build assets directly from disk
     # In Next.js 15 the standalone folder no longer contains "_next/static".
     # Static files are emitted into ".next/static" directly.
     location /_next/static/ {
         alias /var/www/John_Galt_Panel/frontend/.next/static/;
         access_log off;
         add_header Cache-Control "public, max-age=31536000, immutable";
     }
 
     # Proxy all other Next.js requests to the standalone server
     location /_next/ {
         proxy_pass http://frontend;
         proxy_http_version 1.1;
         proxy_set_header Host $host;
