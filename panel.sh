#!/bin/bash

# –¶–≤–µ—Ç–∞
bold=$(tput bold)
normal=$(tput sgr0)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
cyan=$(tput setaf 6)
reset=$(tput sgr0)

log_action() {
  mkdir -p logs
  echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" >> logs/panel.log
}

case "$1" in
  frontend:build)
    echo "üîß –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (SSR)..."
    cd frontend

    echo "‚ñ∂Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ patch.diff..."
    git pull origin main
    if [ -f patch.diff ]; then
      git apply patch.diff && echo "‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω—ë–Ω"
    else
      echo "‚ö†Ô∏è  patch.diff –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi

    npm install
    npm run build

    echo "üßπ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ SSR-—Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ pm2..."
    pm2 delete john-galt-frontend || true
    pm2 start .next/standalone/server.js --name john-galt-frontend

    exit 0
    ;;
esac

while true; do
  clear
  echo "============================================"
  echo "   üöÄ ${bold}DevOps –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º${normal}"
  echo "============================================"

  echo "${bold}[1-10] –û–°–ù–û–í–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï${normal}"
  echo " 1. ‚ùå –í—ã–π—Ç–∏"
  echo " 2. üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏       (npm install)"
  echo " 3. ‚öôÔ∏è  –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞            (npm run build)"
  echo " 4. üßπ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å public/ –≤ out/    (–æ—á–∏—Å—Ç–∫–∞ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤)"
  echo " 5. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ nginx             (systemctl reload nginx)"
  echo " 6. üöÄ –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π                (2 ‚Üí 3 ‚Üí 4 ‚Üí 5)"
  echo " 7. üßØ –û—Ç–∫–∞—Ç –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏     (out_backup/* ‚Üí out/)"
  echo " 8. üîÅ Git Pull                     (–æ–±–Ω–æ–≤–∏—Ç—å main)"
  echo " 9. üß™ Zero Downtime Deploy         (–≤—Ä–µ–º–µ–Ω–Ω–∞—è out ‚Üí swap)"
  echo "10. üì§ Git Push                     (commit + push)"

  echo "${bold}[11-20] GIT –ò –°–¶–ï–ù–ê–†–ò–ò${normal}"
  echo "11. üöÄ DEPLOY-FULL                  (–∑–∞–ø—É—Å–∫ deploy-full.sh)"
  echo "12. üßØ ROLLBACK                     (–æ—Ç–∫–∞—Ç rollback.sh)"
  echo "13. üìÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å patch.diff         (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"
  echo "14. üîñ –°–æ–∑–¥–∞—Ç—å Git Tag              (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)"
  echo "15. ‚¨ÜÔ∏è  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Ç–µ–≥–∏          (git push --tags)"
  echo "16. üßπ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏   (–∏ —Å origin)"

  echo "${bold}[21-30] BACKEND –ò API${normal}"
  echo "21. üêç –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å backend        (Gunicorn systemctl)"
  echo "22. üìä –°—Ç–∞—Ç—É—Å backend –∏ nginx"
  echo "23. üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ Gunicorn"
  echo "24. üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API /api/inventory/"
  echo "25. üì§ –î–∞–º–ø PostgreSQL              (pg_dump ‚Üí dumps/)"
  echo "26. üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–º–ø–∞         (–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∞–º–ø–∞)"
  echo "27. üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"
  echo "28. üí¨ Telegram Token –∏–∑ .env"
  echo "29. üì¨ –õ–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram"
  echo "30. üöÄ GitHub Actions Webhook Trigger"

  echo "${bold}[31-40] –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –£–¢–ò–õ–ò–¢–´${normal}"
  echo "31. üì¶ Pull + Build + Reload        (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ + –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)"
  echo "32. üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞ –∏ –ø–∞–º—è—Ç–∏"
  echo "33. üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞ –ø–∞–Ω–µ–ª–∏"
  echo "34. ‚öôÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å nginx config"
  echo "35. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Å–∞–π—Ç–∞"
  echo "36. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ 80/8000"
  echo "37. üìä Glances (–Ω–∞–≥—Ä—É–∑–∫–∞, –ø—Ä–æ—Ü–µ—Å—Å—ã)"
  echo "38. üßº –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø–∞–Ω–µ–ª–∏"
  echo "39. üß∞ –ê—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞                (tar.gz –≤ backups/)"
  echo "40. üïí –ù–∞—Å—Ç—Ä–æ–∏—Ç—å cron-–±—ç–∫–∞–ø"

  echo "============================================"
  read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: " choice

  case $choice in
    1) exit 0 ;;
    2) npm install ;;
    3) npm run build ;;
    4) rm -rf out/images out/*.jpg out/*.png out/*.svg out/*.ico; cp -r public/* out/ ;;
    5) sudo systemctl reload nginx ;;
    6) npm install && npm run build && cp -r public/* out/ && sudo systemctl reload nginx ;;
    7) cp -r out_backup/* out/ && sudo systemctl reload nginx ;;
    8) git pull origin main ;;
    9) rm -rf out_temp/ && mkdir -p out_temp/ && npm run build && cp -r public/* out_temp/ && mv out out_backup_$(date +%s) && mv out_temp out && sudo systemctl reload nginx ;;
    10) git add .; read -p "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–æ–º–º–∏—Ç—É: " msg; git commit -m "${msg:-auto-commit $(date)}"; git push origin main ;;
    11) ./deploy-full.sh ;;
    12) ./rollback.sh ;;
    13)
      echo "‚ñ∂Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ patch.diff..."
      git pull origin main
      if [ -f patch.diff ]; then
        git apply patch.diff && echo "‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω—ë–Ω"
      else
        echo "‚ö†Ô∏è  patch.diff –Ω–µ –Ω–∞–π–¥–µ–Ω"
      fi
      npm install && npm run build && cp -r public/* out/ && sudo systemctl reload nginx
      ;;
    14) read -p "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥: " tag; git tag "$tag"; echo "‚úÖ –¢–µ–≥ —Å–æ–∑–¥–∞–Ω: $tag" ;;
    15) git push origin --tags ;;
    16) git tag | xargs git tag -d; git push origin --delete $(git tag) ;;
    21) sudo systemctl restart web_panel ;;
    22) systemctl status web_panel --no-pager; systemctl status nginx --no-pager; read -p "Enter..." ;;
    23) journalctl -u web_panel.service -n 20 --no-pager; read -p "Enter..." ;;
    24) curl -s -o /dev/null -w "HTTP: %{http_code}\n" http://127.0.0.1:8000/api/inventory/; read -p "Enter..." ;;
    25) mkdir -p dumps && pg_dump -U postgres -d your_dbname > dumps/dump_$(date +%F_%T).sql && echo "‚úÖ –î–∞–º–ø —Å–æ–∑–¥–∞–Ω" ;;
    26) latest_dump=$(ls -t dumps/*.sql | head -n 1); psql -U postgres -d your_dbname < "$latest_dump"; echo "‚úÖ –î–∞–º–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $latest_dump" ;;
    27)
      echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:"
      test -f .env && source .env
      for var in POSTGRESQL_HOST POSTGRESQL_PORT POSTGRESQL_USER POSTGRESQL_DBNAME; do
        val=$(grep "^$var=" .env | cut -d= -f2)
        if [ -z "$val" ]; then echo "‚ùå $var –Ω–µ –∑–∞–¥–∞–Ω"; else echo "‚úÖ $var = $val"; fi
      done
      read -p "Enter..." ;;
    28) grep TELEGRAM_TOKEN .env ;;
    29) cat logs/telegram.log | tail -n 20; read -p "Enter..." ;;
    30) curl -X POST https://api.github.com/repos/YOUR_USER/YOUR_REPO/dispatches -H "Accept: application/vnd.github.v3+json" -H "Authorization: token YOUR_TOKEN" -d '{"event_type":"deploy"}' ;;
    31) git pull origin main && npm run build && cp -r public/* out/ && sudo systemctl reload nginx ;;
    32) df -h | grep /$; free -h; read -p "Enter..." ;;
    33) less logs/panel.log ;;
    34) sudo nano /etc/nginx/sites-available/default ;;
    35) curl -s -o /dev/null -w "HTTP: %{http_code}\n" http://localhost; read -p "Enter..." ;;
    36) ss -tulnp | grep -E ":8000|:80"; read -p "Enter..." ;;
    37) command -v glances >/dev/null && glances || echo "‚ùå Glances –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; read -p "Enter..." ;;
    38) rm -f logs/*.log && echo "‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã" ;;
    39) mkdir -p ../backups; tar czf ../backups/project_$(date +%F_%H%M%S).tar.gz . && echo "‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω" ;;
    40) echo "‚è± –î–æ–±–∞–≤—å cron-–±—ç–∫–∞–ø –≤—Ä—É—á–Ω—É—é: crontab -e" ;;
    *) echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞" ;;
  esac

  log_action "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: $choice"
done
