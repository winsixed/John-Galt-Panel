diff a/frontend/src/layout/AppSidebar.tsx b/frontend/src/layout/AppSidebar.tsx	(rejected hunks)
@@ -1,62 +1,65 @@
 "use client";
-import React, { useEffect, useRef, useState, useCallback } from "react";
+import React, { useEffect, useRef, useState, useCallback, useMemo } from "react";
 import Link from "next/link";
 import Image from "next/image";
 import { usePathname } from "next/navigation";
 import { useSidebar } from "../context/SidebarContext";
 import { ChevronDownIcon, GridIcon, HorizontaLDots } from "../icons/index";
 import { useAuth } from "@/context/AuthContext";
 
 
 type NavItem = {
   name: string;
   icon: React.ReactNode;
   path?: string;
   subItems?: { name: string; path: string; pro?: boolean; new?: boolean }[];
 };
 
 const othersItems: NavItem[] = [];
 
 const AppSidebar: React.FC = () => {
   const { isExpanded, isMobileOpen, isHovered, setIsHovered } = useSidebar();
   const { user } = useAuth();
   const pathname = usePathname();
 
-  const navItems: NavItem[] = [
-    { icon: <GridIcon />, name: "Главная", path: "/" },
-    { icon: <GridIcon />, name: "Профиль", path: "/profile" },
-    ...(user && (user.role === "admin" || user.role === "staff")
-      ? [
-          { icon: <GridIcon />, name: "Настройки", path: "/settings" },
-          { icon: <GridIcon />, name: "Инвентарь", path: "/inventory" },
-        ]
-      : []),
-    ...(user?.role === "admin"
-      ? [{ icon: <GridIcon />, name: "Админ", path: "/admin" }]
-      : []),
-  ];
+  const navItems: NavItem[] = useMemo(
+    () => [
+      { icon: <GridIcon />, name: "Главная", path: "/" },
+      { icon: <GridIcon />, name: "Профиль", path: "/profile" },
+      ...(user && (user.role === "admin" || user.role === "staff")
+        ? [
+            { icon: <GridIcon />, name: "Настройки", path: "/settings" },
+            { icon: <GridIcon />, name: "Инвентарь", path: "/inventory" },
+          ]
+        : []),
+      ...(user?.role === "admin"
+        ? [{ icon: <GridIcon />, name: "Админ", path: "/admin" }]
+        : []),
+    ],
+    [user]
+  );
 
   const renderMenuItems = (
     navItems: NavItem[],
     menuType: "main" | "others"
   ) => (
     <ul className="flex flex-col gap-4">
       {navItems.map((nav, index) => (
         <li key={nav.name}>
           {nav.subItems ? (
             <button
               onClick={() => handleSubmenuToggle(index, menuType)}
               className={`menu-item group  ${
                 openSubmenu?.type === menuType && openSubmenu?.index === index
                   ? "menu-item-active"
                   : "menu-item-inactive"
               } cursor-pointer ${
                 !isExpanded && !isHovered
                   ? "lg:justify-center"
                   : "lg:justify-start"
               }`}
             >
               <span
                 className={` ${
                   openSubmenu?.type === menuType && openSubmenu?.index === index
                     ? "menu-item-icon-active"
