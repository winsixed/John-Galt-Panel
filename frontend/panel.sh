#!/bin/bash

log_action() {
  mkdir -p logs
  echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" >> logs/panel.log
}

while true; do
  clear
  echo "=================================="
  echo "   üöÄ DevOps –ö–æ–Ω—Å–æ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
  echo "=================================="

  echo "[ –û–°–ù–û–í–ù–û–ï ]"
  echo " 1. ‚ùå –í—ã–π—Ç–∏"
  echo " 2. üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏         (npm install)"
  echo " 3. ‚öôÔ∏è  –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞              (npm run build)"
  echo " 4. üßπ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ out/    (public/* ‚Üí out/)"
  echo " 5. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å nginx"
  echo " 6. üöÄ –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π –≤—Ä—É—á–Ω—É—é         (2 ‚Üí 3 ‚Üí 4 ‚Üí 5)"
  echo " 7. üßØ –û—Ç–∫–∞—Ç –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏       (out_backup/* ‚Üí out/)"

  echo "[ GIT –û–ü–ï–†–ê–¶–ò–ò ]"
  echo " 8. üîÅ Git Pull                       (–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ main)"
  echo " 9. üß™ Zero Downtime Deploy          (build ‚Üí temp ‚Üí swap)"
  echo "10. üì§ Git Push                      (commit + push main)"
  echo "32. üîñ –°–æ–∑–¥–∞—Ç—å Git Tag"
  echo "33. ‚¨ÜÔ∏è  Push –≤—Å–µ—Ö —Ç–µ–≥–æ–≤"
  echo "34. üßπ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ–≥–∏ –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ origin"

  echo "[ –°–¶–ï–ù–ê–†–ò–ò –ò –ê–†–•–ò–í–ê–¶–ò–Ø ]"
  echo "11. üöÄ DEPLOY-FULL (deploy-full.sh)  (–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å–±–æ—Ä–∫–∏)"
  echo "12. üßØ ROLLBACK (rollback.sh)         (–æ—Ç–∫–∞—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞)"
  echo "18. üóÇ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç            (tar . ‚Üí backups/)"
  echo "29. üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"

  echo "[ BACKEND / API / –ë–ê–ó–ê ]"
  echo "13. üêç –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å backend         (systemctl restart web_panel)"
  echo "14. üìä –°—Ç–∞—Ç—É—Å backend –∏ nginx"
  echo "15. üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ Gunicorn"
  echo "17. üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API /api/inventory/"
  echo "36. üì§ –î–∞–º–ø PostgreSQL (pg_dump)"
  echo "37. üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–º–ø–∞ PostgreSQL"

  echo "[ MONITOR–ò–ù–ì –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê ]"
  echo "16. üöÄ Pull + Build + Reload"
  echo "21. üíæ –î–∏—Å–∫ –∏ –ø–∞–º—è—Ç—å (df, free)"
  echo "22. üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞ –ø–∞–Ω–µ–ª–∏"
  echo "23. ‚öôÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å nginx config"
  echo "24. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Å–∞–π—Ç–∞"
  echo "28. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ (8000/nginx)"
  echo "31. üìä Glances: –∑–∞–≥—Ä—É–∑–∫–∞, –ø–∞–º—è—Ç—å –∏ —Ç.–¥."

  echo "[ –¢–ï–°–¢–´ / –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ]"
  echo "25. üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"
  echo "26. üß™ –¢–µ—Å—Ç—ã —Ñ—Ä–æ–Ω—Ç–∞ (npm test)"
  echo "27. üß™ –¢–µ—Å—Ç—ã –±—ç–∫–∞ (pytest)"
  echo "35. üìÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å cron-–±—ç–∫–∞–ø"
  echo "38. üõ† Telegram Token –∏–∑ .env"
  echo "39. üì¨ –õ–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram"
  echo "40. üöÄ GitHub Actions trigger"

  echo "=================================="
  read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: " choice

  case $choice in
    1) exit 0 ;;
    2) npm install ;;
    3) npm run build ;;
    4) rm -rf out/images out/*.jpg out/*.png out/*.svg out/*.ico; cp -r public/* out/ ;;
    5) sudo systemctl reload nginx ;;
    6) npm install && npm run build && cp -r public/* out/ && sudo systemctl reload nginx ;;
    7) cp -r out_backup/* out/ && sudo systemctl reload nginx ;;
    8) git pull origin main ;;
    9) rm -rf out_temp/ && mkdir -p out_temp/ && npm run build && cp -r public/* out_temp/ && mv out out_backup_$(date +%s) && mv out_temp out && sudo systemctl reload nginx ;;
    10) git add .; read -p "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " msg; git commit -m "${msg:-autocommit $(date)}"; git push origin main ;;
    11) ./deploy-full.sh ;;
    12) ./rollback.sh ;;
    13) sudo systemctl restart web_panel ;;
    14) systemctl status web_panel --no-pager; systemctl status nginx --no-pager; read -p "Enter..." ;;
    15) journalctl -u web_panel.service -n 20 --no-pager; read -p "Enter..." ;;
    16) git pull origin main && npm run build && cp -r public/* out/ && sudo systemctl reload nginx ;;
    17) curl -s -o /dev/null -w "HTTP: %{http_code}\n" http://127.0.0.1:8000/api/inventory/; read -p "Enter..." ;;
    18) mkdir -p ../backups; tar czf ../backups/project_$(date +%Y%m%d_%H%M%S).tar.gz . ;;
    21) df -h | grep /$; free -h; read -p "Enter..." ;;
    22) less logs/panel.log ;;
    23) nano /etc/nginx/sites-available/default ;;
    24) curl -s -o /dev/null -w "HTTP: %{http_code}\n" https://johngaltbar.ru; read -p "Enter..." ;;
    25)
      echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö .env:"
      test -f .env && source .env
      for var in POSTGRESQL_HOST POSTGRESQL_PORT POSTGRESQL_USER POSTGRESQL_DBNAME; do
        val=$(grep "^$var=" .env | cut -d= -f2)
        if [ -z "$val" ]; then echo "‚ùå $var –Ω–µ –∑–∞–¥–∞–Ω"; else echo "‚úÖ $var = $val"; fi
      done
      read -p "Enter..." ;;
    26) npm test || echo "‚ùå npm test failed"; read -p "Enter..." ;;
    27) pytest || echo "‚ùå pytest not found or failed"; read -p "Enter..." ;;
    28) ss -tulnp | grep -E ":8000|:80"; read -p "Enter..." ;;
    29) rm -f logs/*.log; echo "‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã"; read -p "Enter..." ;;
  esac
  log_action "–í—ã–ø–æ–ª–Ω–µ–Ω –ø—É–Ω–∫—Ç $choice"
done
